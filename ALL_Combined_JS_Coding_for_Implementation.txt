--------------------------------
First file
--------------------------------
Recommended Structure for HTML/CSS/JS Application
Here's how I would organize these files into a traditional web application:
--------------------------------


smokin-notes-next/
├── app/
│   ├── layout.tsx            (root layout with navigation)
│   ├── page.tsx              (homepage)
│   ├── auth/
│   │   ├── layout.tsx        (auth layout with minimal header/footer)
│   │   ├── sign-up/
│   │   │   └── page.tsx
│   │   ├── login/
│   │   │   └── page.tsx
│   │   ├── forgot-password/
│   │   │   └── page.tsx
│   │   └── profile-setup/
│   │       └── page.tsx
│   ├── membership/
│   │   ├── layout.tsx
│   │   ├── plans/
│   │   │   └── page.tsx
│   │   ├── payment/
│   │   │   └── page.tsx
│   │   └── course-selection/
│   │       └── page.tsx
│   └── account/
│       ├── layout.tsx        (account layout with sidebar)
│       ├── page.tsx          (profile page)
│       ├── billing/
│       │   └── page.tsx
│       ├── subscription/
│       │   └── page.tsx
│       ├── password/
│       │   └── page.tsx
│       └── courses/
│           └── page.tsx
├── components/
│   ├── ui/                   (reusable UI components)
│   │   ├── button.tsx
│   │   ├── card.tsx
│   │   ├── input.tsx
│   │   └── modal.tsx
│   ├── auth/                 (auth-specific components)
│   │   ├── signup-form.tsx
│   │   └── login-form.tsx
│   ├── membership/           (membership-specific components)
│   │   ├── plan-card.tsx
│   │   └── payment-form.tsx
│   ├── account/              (account-specific components)
│   │   ├── sidebar.tsx
│   │   └── profile-form.tsx
│   └── layout/               (layout components)
│       ├── header.tsx
│       ├── footer.tsx
│       └── sidebar.tsx
├── lib/
│   ├── utils.ts              (utility functions)
│   └── auth.ts               (authentication helpers)
├── store/
│   ├── auth-store.ts         (authentication state)
│   ├── user-store.ts         (user data state)
│   └── course-store.ts       (course selection state)
├── styles/
│   └── globals.css           (global styles and Tailwind imports)
├── public/
│   └── images/
│       └── logo.png
├── tailwind.config.js
└── package.json



--------------------------------
Next file #2
--------------------------------
For a modern Next.js application with Tailwind CSS, here's how I would structure the project:
--------------------------------

smokin-notes-next/
├── app/
│   ├── layout.tsx            (root layout with navigation)
│   ├── page.tsx              (homepage)
│   ├── auth/
│   │   ├── layout.tsx        (auth layout with minimal header/footer)
│   │   ├── sign-up/
│   │   │   └── page.tsx
│   │   ├── login/
│   │   │   └── page.tsx
│   │   ├── forgot-password/
│   │   │   └── page.tsx
│   │   └── profile-setup/
│   │       └── page.tsx
│   ├── membership/
│   │   ├── layout.tsx
│   │   ├── plans/
│   │   │   └── page.tsx
│   │   ├── payment/
│   │   │   └── page.tsx
│   │   └── course-selection/
│   │       └── page.tsx
│   └── account/
│       ├── layout.tsx        (account layout with sidebar)
│       ├── page.tsx          (profile page)
│       ├── billing/
│       │   └── page.tsx
│       ├── subscription/
│       │   └── page.tsx
│       ├── password/
│       │   └── page.tsx
│       └── courses/
│           └── page.tsx
├── components/
│   ├── ui/                   (reusable UI components)
│   │   ├── button.tsx
│   │   ├── card.tsx
│   │   ├── input.tsx
│   │   └── modal.tsx
│   ├── auth/                 (auth-specific components)
│   │   ├── signup-form.tsx
│   │   └── login-form.tsx
│   ├── membership/           (membership-specific components)
│   │   ├── plan-card.tsx
│   │   └── payment-form.tsx
│   ├── account/              (account-specific components)
│   │   ├── sidebar.tsx
│   │   └── profile-form.tsx
│   └── layout/               (layout components)
│       ├── header.tsx
│       ├── footer.tsx
│       └── sidebar.tsx
├── lib/
│   ├── utils.ts              (utility functions)
│   └── auth.ts               (authentication helpers)
├── store/
│   ├── auth-store.ts         (authentication state)
│   ├── user-store.ts         (user data state)
│   └── course-store.ts       (course selection state)
├── styles/
│   └── globals.css           (global styles and Tailwind imports)
├── public/
│   └── images/
│       └── logo.png
├── tailwind.config.js
└── package.json



--------------------------------
Next file #3
--------------------------------
Next.js and Tailwind Structure
For a modern Next.js application with Tailwind CSS, here's how I would structure the project:
--------------------------------
smokin-notes-next/
├── app/
│   ├── layout.tsx            (root layout with navigation)
│   ├── page.tsx              (homepage)
│   ├── auth/
│   │   ├── layout.tsx        (auth layout with minimal header/footer)
│   │   ├── sign-up/
│   │   │   └── page.tsx
│   │   ├── login/
│   │   │   └── page.tsx
│   │   ├── forgot-password/
│   │   │   └── page.tsx
│   │   └── profile-setup/
│   │       └── page.tsx
│   ├── membership/
│   │   ├── layout.tsx
│   │   ├── plans/
│   │   │   └── page.tsx
│   │   ├── payment/
│   │   │   └── page.tsx
│   │   └── course-selection/
│   │       └── page.tsx
│   └── account/
│       ├── layout.tsx        (account layout with sidebar)
│       ├── page.tsx          (profile page)
│       ├── billing/
│       │   └── page.tsx
│       ├── subscription/
│       │   └── page.tsx
│       ├── password/
│       │   └── page.tsx
│       └── courses/
│           └── page.tsx
├── components/
│   ├── ui/                   (reusable UI components)
│   │   ├── button.tsx
│   │   ├── card.tsx
│   │   ├── input.tsx
│   │   └── modal.tsx
│   ├── auth/                 (auth-specific components)
│   │   ├── signup-form.tsx
│   │   └── login-form.tsx
│   ├── membership/           (membership-specific components)
│   │   ├── plan-card.tsx
│   │   └── payment-form.tsx
│   ├── account/              (account-specific components)
│   │   ├── sidebar.tsx
│   │   └── profile-form.tsx
│   └── layout/               (layout components)
│       ├── header.tsx
│       ├── footer.tsx
│       └── sidebar.tsx
├── lib/
│   ├── utils.ts              (utility functions)
│   └── auth.ts               (authentication helpers)
├── store/
│   ├── auth-store.ts         (authentication state)
│   ├── user-store.ts         (user data state)
│   └── course-store.ts       (course selection state)
├── styles/
│   └── globals.css           (global styles and Tailwind imports)
├── public/
│   └── images/
│       └── logo.png
├── tailwind.config.js
└── package.json


--------------------------------
Next file #4
--------------------------------
Let me implement a key part of this as an example:
Let's create the layout.tsx file for the account section, which would provide the sidebar menu seen in many of your account-related pages:
--------------------------------
// app/account/layout.tsx
import { ReactNode } from 'react';
import AccountSidebar from '@/components/account/sidebar';
import Header from '@/components/layout/header';
import Footer from '@/components/layout/footer';

export default function AccountLayout({ children }: { children: ReactNode }) {
  return (
    <>
      <Header />
      <main className="flex flex-1 p-10">
        <AccountSidebar />
        <div className="flex-1 max-w-3xl">{children}</div>
      </main>
      <Footer />
    </>
  );
}


--------------------------------
Next file #5
--------------------------------
And here's the implementation of the AccountSidebar component:
--------------------------------
// components/account/sidebar.tsx
'use client';

import Link from 'next/link';
import { usePathname } from 'next/navigation';
import clsx from 'clsx';

const links = [
  { href: '/account', label: 'Profile' },
  { href: '/account/billing', label: 'Billing' },
  { href: '/account/subscription', label: 'Subscription' },
  { href: '/account/password', label: 'Change Password' },
];

export default function AccountSidebar() {
  const pathname = usePathname();
  
  return (
    <div className="w-64 mr-10">
      <div className="bg-white rounded-lg overflow-hidden shadow-sm">
        <h2 className="text-lg p-5 border-b border-gray-200">Account Settings</h2>
        <ul>
          {links.map((link) => (
            <li key={link.href} className="border-b border-gray-200 last:border-b-0">
              <Link
                href={link.href}
                className={clsx(
                  'block py-3 px-5 text-gray-700 hover:bg-gray-50 transition-colors',
                  pathname === link.href && 'bg-red-50 text-red-600 font-medium'
                )}
              >
                {link.label}
              </Link>
            </li>
          ))}
        </ul>
      </div>
    </div>
  );
}



--------------------------------
Next file #6
--------------------------------
Global State Management
For state management, we'll use Zustand which works well with Next.js:
--------------------------------
// store/auth-store.ts
import { create } from 'zustand';

interface AuthState {
  isAuthenticated: boolean;
  user: User | null;
  login: (email: string, password: string) => Promise<void>;
  logout: () => void;
}

interface User {
  id: string;
  name: string;
  email: string;
}

export const useAuthStore = create<AuthState>((set) => ({
  isAuthenticated: false,
  user: null,
  
  login: async (email, password) => {
    // In a real app, make API call to authenticate
    const response = await fetch('/api/login', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ email, password }),
    });
    
    if (response.ok) {
      const user = await response.json();
      set({ isAuthenticated: true, user });
    } else {
      throw new Error('Authentication failed');
    }
  },
  
  logout: () => {
    // In a real app, make API call to log out
    fetch('/api/logout', { method: 'POST' });
    set({ isAuthenticated: false, user: null });
  },
}));


--------------------------------
Next file #7
--------------------------------

--------------------------------
// store/user-store.ts
import { create } from 'zustand';

interface UserProfile {
  firstName: string;
  lastName: string;
  email: string;
  contactEmail: string;
  phone: string;
  major: string;
  status: string;
}

interface UserState {
  profile: UserProfile | null;
  isLoading: boolean;
  fetchProfile: () => Promise<void>;
  updateProfile: (updates: Partial<UserProfile>) => Promise<void>;
}

export const useUserStore = create<UserState>((set, get) => ({
  profile: null,
  isLoading: false,
  
  fetchProfile: async () => {
    set({ isLoading: true });
    try {
      const response = await fetch('/api/profile');
      if (response.ok) {
        const profile = await response.json();
        set({ profile, isLoading: false });
      } else {
        set({ isLoading: false });
        throw new Error('Failed to fetch profile');
      }
    } catch (error) {
      set({ isLoading: false });
      console.error(error);
    }
  },
  
  updateProfile: async (updates) => {
    set({ isLoading: true });
    try {
      const response = await fetch('/api/profile', {
        method: 'PATCH',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(updates),
      });
      
      if (response.ok) {
        const updatedProfile = { ...get().profile, ...updates };
        set({ profile: updatedProfile, isLoading: false });
      } else {
        set({ isLoading: false });
        throw new Error('Failed to update profile');
      }
    } catch (error) {
      set({ isLoading: false });
      console.error(error);
    }
  }
}));


--------------------------------
Next file #8
--------------------------------
Profile Page Example
Here's an example of the profile page using these components:
--------------------------------
// app/account/page.tsx
'use client';

import { useEffect } from 'react';
import { useUserStore } from '@/store/user-store';
import { Card } from '@/components/ui/card';

export default function ProfilePage() {
  const { profile, isLoading, fetchProfile } = useUserStore();
  
  useEffect(() => {
    fetchProfile();
  }, [fetchProfile]);
  
  if (isLoading) {
    return <div className="flex justify-center py-10">Loading...</div>;
  }
  
  if (!profile) {
    return <div className="flex justify-center py-10">Could not load profile data</div>;
  }

  return (
    <>
      <h1 className="text-2xl font-semibold mb-5 text-gray-800">Member Profile</h1>
      
      <Card className="bg-white rounded-lg shadow-sm p-6 mb-6">
        <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
          <div>
            <h2 className="text-lg font-medium pb-2 mb-4 border-b border-gray-200">Personal Information</h2>
            <div className="space-y-3">
              <InfoRow label="Name" value={`${profile.firstName} ${profile.lastName}`} />
              <InfoRow label="UFL Email" value={profile.email} />
              <InfoRow label="Contact Email" value={profile.contactEmail} />
              <InfoRow label="Phone" value={profile.phone} />
            </div>
            <a href="/account/update-contact" className="inline-block mt-4 px-4 py-2 bg-gray-100 text-gray-700 rounded-md hover:bg-gray-200 transition-colors">
              Edit Contact Info
            </a>
          </div>
          
          <div>
            <h2 className="text-lg font-medium pb-2 mb-4 border-b border-gray-200">Academic Information</h2>
            <div className="space-y-3">
              <InfoRow label="University" value="University of Florida" />
              <InfoRow label="Major" value={profile.major} />
              <InfoRow label="Status" value={profile.status} />
            </div>
          </div>
        </div>
      </Card>
      
      {/* Additional cards for Membership Information and Course Access would go here */}
    </>
  );
}

function InfoRow({ label, value }: { label: string; value: string }) {
  return (
    <div className="flex">
      <div className="w-36 text-gray-500">{label}</div>
      <div className="flex-1">{value}</div>
    </div>
  );
}



--------------------------------
Next file #9
--------------------------------
Tailwind Configuration
Since the original design uses a red color scheme, here's the tailwind.config.js file that would match that theme:
--------------------------------
// tailwind.config.js
const colors = require('tailwindcss/colors');

module.exports = {
  content: [
    './app/**/*.{js,ts,jsx,tsx}',
    './components/**/*.{js,ts,jsx,tsx}',
  ],
  theme: {
    extend: {
      colors: {
        primary: {
          50: '#ffebee',
          100: '#ffcdd2',
          200: '#ef9a9a',
          300: '#e57373',
          400: '#ef5350',
          500: '#d32f2f', // Primary color from original design
          600: '#b71c1c', // Hover color from original design
          700: '#a01616',
          800: '#8c1014',
          900: '#7a0b12',
        },
        success: {
          // Green colors for success states
          50: '#e8f5e9',
          500: '#2e7d32',
        },
        warning: {
          // Orange colors for warning states
          50: '#fff8e1', 
          500: '#f57c00',
        },
      },
      fontFamily: {
        sans: ['-apple-system', 'BlinkMacSystemFont', 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu', 'Cantarell', 'sans-serif'],
        serif: ['Georgia', 'serif'],
      },
    },
  },
  plugins: [],
};



--------------------------------
Next file #10
--------------------------------
Next.js and Tailwind Structure
For a modern Next.js application with Tailwind CSS, here's how I would structure the project:
--------------------------------
// components/layout/header.tsx
'use client';

import { useState } from 'react';
import Link from 'next/link';
import { useAuthStore } from '@/store/auth-store';
import { useUserStore } from '@/store/user-store';

export default function Header() {
  const { isAuthenticated, logout } = useAuthStore();
  const { profile } = useUserStore();
  const [membersOnline] = useState(848); // Typically would come from an API
  
  return (
    <header className="bg-white border-b border-gray-200 py-4 px-8 flex justify-between items-center">
      <div className="flex items-center">
        <Link href="/" className="font-serif text-2xl italic text-primary-500">
          Smokin&apos;Notes
        </Link>
        
        {isAuthenticated && (
          <nav className="ml-10 flex gap-8">
            <NavLink href="/classes" label="My Classes" />
            <NavLink href="/study-guides" label="Study Guides" />
            <NavLink href="/account" label="Account" />
            <NavLink href="/help" label="Help" />
          </nav>
        )}
      </div>
      
      {isAuthenticated ? (
        <div className="flex items-center gap-4 text-sm">
          <span>Hello, {profile?.firstName} {profile?.lastName.charAt(0)}.</span>
          <span className="text-gray-500">{membersOnline} Members Online</span>
          <span className="text-gray-400">|</span>
          <button 
            onClick={logout}
            className="text-gray-700 hover:text-primary-500 transition-colors"
          >
            Logout
          </button>
        </div>
      ) : (
        <div className="flex items-center gap-4">
          <Link 
            href="/auth/login"
            className="text-gray-700 hover:text-primary-500 transition-colors"
          >
            Login
          </Link>
          <Link
            href="/auth/sign-up"
            className="bg-primary-500 hover:bg-primary-600 text-white py-2 px-4 rounded-md transition-colors"
          >
            Sign Up
          </Link>
        </div>
      )}
    </header>
  );
}

function NavLink({ href, label }: { href: string; label: string }) {
  // We'd typically check the current path to highlight the active link
  // For simplicity, we're just rendering the links here
  return (
    <Link 
      href={href}
      className="text-gray-800 hover:text-primary-500 py-1 border-b-2 border-transparent hover:border-primary-500 transition-colors"
    >
      {label}
    </Link>
  );
}



--------------------------------
Next file #11
--------------------------------
Membership Plans Component
This component would display the different membership plans (1-course, 2-course, 3-course):
--------------------------------
// components/membership/plan-cards.tsx
'use client';

import { useState } from 'react';
import { useRouter } from 'next/navigation';
import { Card } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import clsx from 'clsx';

type Plan = {
  id: string;
  title: string;
  price: number;
  description: string;
  features: string[];
  popular?: boolean;
};

const plans: Plan[] = [
  {
    id: '1-course',
    title: 'MEMBERSHIP | 1',
    price: 50,
    description: 'For your single toughest course.',
    features: [
      'Access to 1 course\'s complete study materials',
      'Materials updated weekly with latest content',
      'Online Study Guides, Chapter Summaries, and Flash Cards',
      'Online Practice Exams',
      'Online Tutorial Videos'
    ]
  },
  {
    id: '2-course',
    title: 'MEMBERSHIP | 2',
    price: 75,
    description: 'For your two toughest courses.',
    features: [
      'Access to 2 courses\' complete study materials',
      'Materials updated weekly with latest content',
      'Online Study Guides, Chapter Summaries, and Flash Cards',
      'Online Practice Exams',
      'Online Tutorial Videos'
    ],
    popular: true
  },
  {
    id: '3-course',
    title: 'MEMBERSHIP | 3',
    price: 100,
    description: 'For your three key courses.',
    features: [
      'Access to 3 courses\' complete study materials',
      'Materials updated weekly with latest content',
      'Online Study Guides, Chapter Summaries, and Flash Cards',
      'Online Practice Exams',
      'Online Tutorial Videos'
    ]
  }
];

export default function PlanCards() {
  const [selectedPlan, setSelectedPlan] = useState<string | null>(null);
  const router = useRouter();
  
  const handleSubscribe = (planId: string) => {
    setSelectedPlan(planId);
    router.push(`/membership/payment?plan=${planId}`);
  };
  
  return (
    <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
      {plans.map((plan) => (
        <Card 
          key={plan.id}
          className={clsx(
            'border rounded-lg overflow-hidden transition-all hover:shadow-md',
            selectedPlan === plan.id && 'border-primary-500 bg-primary-50'
          )}
        >
          <div className="p-6 border-b border-gray-200 relative">
            {plan.popular && (
              <span className="absolute top-4 right-4 bg-primary-500 text-white text-xs font-semibold py-1 px-3 rounded-full">
                Popular
              </span>
            )}
            <h3 className="text-sm font-semibold text-primary-500 mb-2">{plan.title}</h3>
            <div className="flex items-baseline mb-2">
              <span className="text-gray-600 text-lg">$</span>
              <span className="text-4xl font-bold text-gray-900">{plan.price}</span>
              <span className="text-gray-500 ml-1">/month</span>
            </div>
            <p className="text-gray-600">{plan.description}</p>
          </div>
          
          <div className="p-6">
            <ul className="space-y-3 mb-6">
              {plan.features.map((feature, index) => (
                <li key={index} className="flex items-start">
                  <span className="text-primary-500 mr-2">✓</span>
                  <span className="text-sm text-gray-600">{feature}</span>
                </li>
              ))}
            </ul>
            
            <Button
              onClick={() => handleSubscribe(plan.id)}
              className="w-full bg-primary-500 hover:bg-primary-600 text-white py-3 rounded-md"
            >
              Subscribe
            </Button>
          </div>
        </Card>
      ))}
    </div>
  );
}


--------------------------------
Next file #11
--------------------------------
Course Selection Component
For the course selection page, let's create a component that allows users to search and select courses:
--------------------------------
// components/courses/course-grid.tsx
'use client';

import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { Card } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Button } from '@/components/ui/button';
import { useCourseStore } from '@/store/course-store';
import { useSubscriptionStore } from '@/store/subscription-store';

type Course = {
  code: string;
  name: string;
  term: string;
  semester: string;
  selected: boolean;
};

export default function CourseGrid() {
  const router = useRouter();
  const { maxAllowedCourses } = useSubscriptionStore();
  const { courses, selectedCourses, toggleCourseSelection } = useCourseStore();
  
  const [filteredCourses, setFilteredCourses] = useState<Course[]>(courses);
  const [currentPage, setCurrentPage] = useState(1);
  const [searchTerm, setSearchTerm] = useState('');
  const [currentCategory, setCurrentCategory] = useState('All');
  const [currentDepartment, setCurrentDepartment] = useState('all');
  
  const coursesPerPage = 10;
  
  // Filter courses based on search term, category, and department
  useEffect(() => {
    const filtered = courses.filter(course => {
      // Category filter
      if (currentCategory === 'Business' && 
          !['BUL', 'ECO', 'GEB', 'MAN', 'MAR', 'ENT'].includes(course.code.substring(0, 3))) {
        return false;
      }
      if (currentCategory === 'Science' && 
          !['APK', 'BSC', 'MCB', 'PSY', 'STA'].includes(course.code.substring(0, 3))) {
        return false;
      }
      
      // Department filter
      if (currentDepartment !== 'all' && !course.code.startsWith(currentDepartment)) {
        return false;
      }
      
      // Search filter
      if (searchTerm && 
          !course.code.toLowerCase().includes(searchTerm.toLowerCase()) && 
          !course.name.toLowerCase().includes(searchTerm.toLowerCase())) {
        return false;
      }
      
      return true;
    });
    
    setFilteredCourses(filtered);
    setCurrentPage(1);
  }, [courses, searchTerm, currentCategory, currentDepartment]);
  
  // Calculate pagination
  const indexOfLastCourse = currentPage * coursesPerPage;
  const indexOfFirstCourse = indexOfLastCourse - coursesPerPage;
  const currentCourses = filteredCourses.slice(indexOfFirstCourse, indexOfLastCourse);
  const totalPages = Math.ceil(filteredCourses.length / coursesPerPage);
  
  // Generate page numbers for pagination
  const pageNumbers = [];
  for (let i = 1; i <= totalPages; i++) {
    pageNumbers.push(i);
  }
  
  return (
    <div>
      <div className="bg-primary-50 p-5 rounded-lg mb-6">
        <h3 className="font-semibold text-primary-500">Selection Status</h3>
        <p>You are currently using {selectedCourses.length} of {maxAllowedCourses} available course slots.</p>
        
        {selectedCourses.length > 0 && (
          <div className="mt-4 flex flex-wrap gap-2">
            {selectedCourses.map(course => (
              <div 
                key={course.code}
                className="bg-white text-primary-500 border border-primary-500 py-1 px-3 rounded-full text-sm flex items-center gap-2"
              >
                {course.code} - {course.name}
                <button 
                  onClick={() => toggleCourseSelection(course.code)}
                  className="w-5 h-5 bg-gray-100 rounded-full flex items-center justify-center text-gray-500"
                >
                  ×
                </button>
              </div>
            ))}
          </div>
        )}
      </div>
      
      <div className="mb-6">
        <div className="flex border-b border-gray-200 mb-4">
          <button 
            onClick={() => setCurrentCategory('All')}
            className={`px-5 py-2 ${currentCategory === 'All' ? 'border-b-2 border-primary-500 text-primary-500' : ''}`}
          >
            All
          </button>
          <button 
            onClick={() => setCurrentCategory('Business')}
            className={`px-5 py-2 ${currentCategory === 'Business' ? 'border-b-2 border-primary-500 text-primary-500' : ''}`}
          >
            Business
          </button>
          <button 
            onClick={() => setCurrentCategory('Science')}
            className={`px-5 py-2 ${currentCategory === 'Science' ? 'border-b-2 border-primary-500 text-primary-500' : ''}`}
          >
            Science
          </button>
        </div>
        
        <div className="flex gap-4 mb-6">
          <div className="flex-1 flex">
            <Input
              type="text"
              placeholder="Search for a course..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="rounded-r-none"
            />
            <Button className="rounded-l-none">Search</Button>
          </div>
          
          <select
            value={currentDepartment}
            onChange={(e) => setCurrentDepartment(e.target.value)}
            className="border border-gray-200 rounded-md p-2 w-64"
          >
            <option value="all">All Departments</option>
            <option value="APK">APK - Applied Physiology</option>
            <option value="BSC">BSC - Biological Sciences</option>
            <option value="BUL">BUL - Business Law</option>
            <option value="ECO">ECO - Economics</option>
            <option value="ENT">ENT - Entrepreneurship</option>
            <option value="GEB">GEB - General Business</option>
            <option value="MAN">MAN - Management</option>
            <option value="MAR">MAR - Marketing</option>
            <option value="MCB">MCB - Microbiology</option>
            <option value="PSY">PSY - Psychology</option>
            <option value="STA">STA - Statistics</option>
          </select>
        </div>
      </div>
      
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 mb-6">
        {currentCourses.map(course => (
          <Card
            key={course.code}
            onClick={() => toggleCourseSelection(course.code)}
            className={`p-4 cursor-pointer hover:border-primary-500 hover:shadow-md transition-all ${
              selectedCourses.some(c => c.code === course.code) ? 'bg-primary-50 border-primary-500' : ''
            }`}
          >
            <div className="font-semibold">{course.code}</div>
            <div className="text-gray-600 mb-2">{course.name}</div>
            <div className="flex justify-between text-xs text-gray-500">
              <span>{course.term}</span>
              <span>Study materials available</span>
            </div>
            
            {selectedCourses.some(c => c.code === course.code) && (
              <div className="absolute top-2 right-2 w-5 h-5 bg-primary-500 text-white rounded-full flex items-center justify-center text-xs">
                ✓
              </div>
            )}
          </Card>
        ))}
      </div>
      
      {/* Pagination */}
      {totalPages > 1 && (
        <div className="flex justify-center gap-2 my-6">
          {pageNumbers.map(number => (
            <button
              key={number}
              onClick={() => setCurrentPage(number)}
              className={`w-8 h-8 flex items-center justify-center rounded border ${
                currentPage === number 
                  ? 'bg-primary-500 text-white border-primary-500' 
                  : 'border-gray-200 hover:bg-gray-50'
              }`}
            >
              {number}
            </button>
          ))}
        </div>
      )}
      
      <div className="flex justify-between mt-8">
        <Button variant="outline" onClick={() => router.back()}>
          Back
        </Button>
        <Button onClick={() => router.push('/dashboard')}>
          Continue to Dashboard
        </Button>
      </div>
    </div>
  );
}



--------------------------------
Next file #12
--------------------------------
Next.js and Tailwind Structure
For a modern Next.js application with Tailwind CSS, here's how I would structure the project:
--------------------------------
// components/courses/course-grid.tsx
'use client';

import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { Card } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Button } from '@/components/ui/button';
import { useCourseStore } from '@/store/course-store';
import { useSubscriptionStore } from '@/store/subscription-store';

type Course = {
  code: string;
  name: string;
  term: string;
  semester: string;
  selected: boolean;
};

export default function CourseGrid() {
  const router = useRouter();
  const { maxAllowedCourses } = useSubscriptionStore();
  const { courses, selectedCourses, toggleCourseSelection } = useCourseStore();
  
  const [filteredCourses, setFilteredCourses] = useState<Course[]>(courses);
  const [currentPage, setCurrentPage] = useState(1);
  const [searchTerm, setSearchTerm] = useState('');
  const [currentCategory, setCurrentCategory] = useState('All');
  const [currentDepartment, setCurrentDepartment] = useState('all');
  
  const coursesPerPage = 10;
  
  // Filter courses based on search term, category, and department
  useEffect(() => {
    const filtered = courses.filter(course => {
      // Category filter
      if (currentCategory === 'Business' && 
          !['BUL', 'ECO', 'GEB', 'MAN', 'MAR', 'ENT'].includes(course.code.substring(0, 3))) {
        return false;
      }
      if (currentCategory === 'Science' && 
          !['APK', 'BSC', 'MCB', 'PSY', 'STA'].includes(course.code.substring(0, 3))) {
        return false;
      }
      
      // Department filter
      if (currentDepartment !== 'all' && !course.code.startsWith(currentDepartment)) {
        return false;
      }
      
      // Search filter
      if (searchTerm && 
          !course.code.toLowerCase().includes(searchTerm.toLowerCase()) && 
          !course.name.toLowerCase().includes(searchTerm.toLowerCase())) {
        return false;
      }
      
      return true;
    });
    
    setFilteredCourses(filtered);
    setCurrentPage(1);
  }, [courses, searchTerm, currentCategory, currentDepartment]);
  
  // Calculate pagination
  const indexOfLastCourse = currentPage * coursesPerPage;
  const indexOfFirstCourse = indexOfLastCourse - coursesPerPage;
  const currentCourses = filteredCourses.slice(indexOfFirstCourse, indexOfLastCourse);
  const totalPages = Math.ceil(filteredCourses.length / coursesPerPage);
  
  // Generate page numbers for pagination
  const pageNumbers = [];
  for (let i = 1; i <= totalPages; i++) {
    pageNumbers.push(i);
  }
  
  return (
    <div>
      <div className="bg-primary-50 p-5 rounded-lg mb-6">
        <h3 className="font-semibold text-primary-500">Selection Status</h3>
        <p>You are currently using {selectedCourses.length} of {maxAllowedCourses} available course slots.</p>
        
        {selectedCourses.length > 0 && (
          <div className="mt-4 flex flex-wrap gap-2">
            {selectedCourses.map(course => (
              <div 
                key={course.code}
                className="bg-white text-primary-500 border border-primary-500 py-1 px-3 rounded-full text-sm flex items-center gap-2"
              >
                {course.code} - {course.name}
                <button 
                  onClick={() => toggleCourseSelection(course.code)}
                  className="w-5 h-5 bg-gray-100 rounded-full flex items-center justify-center text-gray-500"
                >
                  ×
                </button>
              </div>
            ))}
          </div>
        )}
      </div>
      
      <div className="mb-6">
        <div className="flex border-b border-gray-200 mb-4">
          <button 
            onClick={() => setCurrentCategory('All')}
            className={`px-5 py-2 ${currentCategory === 'All' ? 'border-b-2 border-primary-500 text-primary-500' : ''}`}
          >
            All
          </button>
          <button 
            onClick={() => setCurrentCategory('Business')}
            className={`px-5 py-2 ${currentCategory === 'Business' ? 'border-b-2 border-primary-500 text-primary-500' : ''}`}
          >
            Business
          </button>
          <button 
            onClick={() => setCurrentCategory('Science')}
            className={`px-5 py-2 ${currentCategory === 'Science' ? 'border-b-2 border-primary-500 text-primary-500' : ''}`}
          >
            Science
          </button>
        </div>
        
        <div className="flex gap-4 mb-6">
          <div className="flex-1 flex">
            <Input
              type="text"
              placeholder="Search for a course..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="rounded-r-none"
            />
            <Button className="rounded-l-none">Search</Button>
          </div>
          
          <select
            value={currentDepartment}
            onChange={(e) => setCurrentDepartment(e.target.value)}
            className="border border-gray-200 rounded-md p-2 w-64"
          >
            <option value="all">All Departments</option>
            <option value="APK">APK - Applied Physiology</option>
            <option value="BSC">BSC - Biological Sciences</option>
            <option value="BUL">BUL - Business Law</option>
            <option value="ECO">ECO - Economics</option>
            <option value="ENT">ENT - Entrepreneurship</option>
            <option value="GEB">GEB - General Business</option>
            <option value="MAN">MAN - Management</option>
            <option value="MAR">MAR - Marketing</option>
            <option value="MCB">MCB - Microbiology</option>
            <option value="PSY">PSY - Psychology</option>
            <option value="STA">STA - Statistics</option>
          </select>
        </div>
      </div>
      
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 mb-6">
        {currentCourses.map(course => (
          <Card
            key={course.code}
            onClick={() => toggleCourseSelection(course.code)}
            className={`p-4 cursor-pointer hover:border-primary-500 hover:shadow-md transition-all ${
              selectedCourses.some(c => c.code === course.code) ? 'bg-primary-50 border-primary-500' : ''
            }`}
          >
            <div className="font-semibold">{course.code}</div>
            <div className="text-gray-600 mb-2">{course.name}</div>
            <div className="flex justify-between text-xs text-gray-500">
              <span>{course.term}</span>
              <span>Study materials available</span>
            </div>
            
            {selectedCourses.some(c => c.code === course.code) && (
              <div className="absolute top-2 right-2 w-5 h-5 bg-primary-500 text-white rounded-full flex items-center justify-center text-xs">
                ✓
              </div>
            )}
          </Card>
        ))}
      </div>
      
      {/* Pagination */}
      {totalPages > 1 && (
        <div className="flex justify-center gap-2 my-6">
          {pageNumbers.map(number => (
            <button
              key={number}
              onClick={() => setCurrentPage(number)}
              className={`w-8 h-8 flex items-center justify-center rounded border ${
                currentPage === number 
                  ? 'bg-primary-500 text-white border-primary-500' 
                  : 'border-gray-200 hover:bg-gray-50'
              }`}
            >
              {number}
            </button>
          ))}
        </div>
      )}
      
      <div className="flex justify-between mt-8">
        <Button variant="outline" onClick={() => router.back()}>
          Back
        </Button>
        <Button onClick={() => router.push('/dashboard')}>
          Continue to Dashboard
        </Button>
      </div>
    </div>
  );
}


--------------------------------
Next file #13
--------------------------------
Course Store
To manage course selection state across components:
--------------------------------
// store/course-store.ts
import { create } from 'zustand';
import { useSubscriptionStore } from '@/store/subscription-store';

type Course = {
  code: string;
  name: string;
  term: string;
  semester: string;
  selected: boolean;
};

interface CourseState {
  courses: Course[];
  selectedCourses: Course[];
  fetchCourses: () => Promise<void>;
  toggleCourseSelection: (courseCode: string) => void;
  saveCourseSelections: () => Promise<void>;
}

// Sample course data
const sampleCourses: Course[] = [
  { code: 'APK2100', name: 'Anatomy', term: 'Web Sections', semester: 'Spring 2025', selected: false },
  { code: 'APK2100-L', name: 'Anatomy', term: 'Live Sections', semester: 'Spring 2025', selected: false },
  { code: 'APK2105', name: 'Physiology', term: 'Web Sections', semester: 'Spring 2025', selected: false },
  { code: 'APK2105-L', name: 'Physiology', term: 'Live Sections', semester: 'Spring 2025', selected: false },
  { code: 'BSC2010', name: 'Biology I', term: 'All Sections', semester: 'Spring 2025', selected: true },
  { code: 'BSC2011', name: 'Biology 2', term: 'All Sections', semester: 'Spring 2025', selected: false },
  { code: 'BUL4310', name: 'Business Law', term: 'All Sections', semester: 'Spring 2025', selected: false },
  { code: 'ECO2013', name: 'Macroeconomics', term: 'All Sections', semester: 'Spring 2025', selected: true },
  // Additional courses would be here
];

export const useCourseStore = create<CourseState>((set, get) => ({
  courses: [],
  selectedCourses: [],
  
  fetchCourses: async () => {
    // In a real app, fetch courses from an API
    // For now, use sample data
    const courses = [...sampleCourses];
    const selectedCourses = courses.filter(course => course.selected);
    
    set({ courses, selectedCourses });
  },
  
  toggleCourseSelection: (courseCode: string) => {
    const { courses } = get();
    const selectedCourses = get().selectedCourses;
    
    // Find the course
    const courseIndex = courses.findIndex(c => c.code === courseCode);
    if (courseIndex === -1) return;
    
    const course = courses[courseIndex];
    const isCurrentlySelected = course.selected;
    
    // Check if we can add more courses
    const { maxAllowedCourses } = useSubscriptionStore.getState();
    
    if (!isCurrentlySelected && selectedCourses.length >= maxAllowedCourses) {
      alert(`You can only select up to ${maxAllowedCourses} courses with your current plan.`);
      return;
    }
    
    // Update the course selection
    const updatedCourses = [...courses];
    updatedCourses[courseIndex] = {
      ...course,
      selected: !isCurrentlySelected
    };
    
    // Update selected courses list
    const updatedSelectedCourses = updatedCourses.filter(c => c.selected);
    
    set({ 
      courses: updatedCourses,
      selectedCourses: updatedSelectedCourses
    });
  },
  
  saveCourseSelections: async () => {
    const { selectedCourses } = get();
    
    // In a real app, save the selections to an API
    console.log('Saving course selections:', selectedCourses);
    
    // Success message or redirect would be handled by the component
    return Promise.resolve();
  }
}));




--------------------------------
Next file #14
--------------------------------
Subscription Store
The subscription store manages the user's membership plan:
--------------------------------
// store/subscription-store.ts
import { create } from 'zustand';

type Plan = '1-course' | '2-course' | '3-course';

interface SubscriptionState {
  currentPlan: Plan;
  maxAllowedCourses: number;
  monthlyPrice: number;
  nextBillingDate: string;
  currentPeriod: {
    start: string;
    end: string;
  };
  isPaused: boolean;
  pauseEndDate: string | null;
  changePlan: (plan: Plan) => Promise<void>;
  pauseSubscription: (durationMonths: number) => Promise<void>;
  cancelSubscription: () => Promise<void>;
}

export const useSubscriptionStore = create<SubscriptionState>((set) => ({
  currentPlan: '2-course',
  maxAllowedCourses: 2,
  monthlyPrice: 75,
  nextBillingDate: 'April 15, 2025',
  currentPeriod: {
    start: 'March 15, 2025',
    end: 'April 14, 2025',
  },
  isPaused: false,
  pauseEndDate: null,
  
  changePlan: async (plan: Plan) => {
    // In a real app, call an API to change the plan
    let maxAllowedCourses = 2;
    let monthlyPrice = 75;
    
    switch (plan) {
      case '1-course':
        maxAllowedCourses = 1;
        monthlyPrice = 50;
        break;
      case '2-course':
        maxAllowedCourses = 2;
        monthlyPrice = 75;
        break;
      case '3-course':
        maxAllowedCourses = 3;
        monthlyPrice = 100;
        break;
    }
    
    set({ 
      currentPlan: plan,
      maxAllowedCourses,
      monthlyPrice,
    });
    
    return Promise.resolve();
  },
  
  pauseSubscription: async (durationMonths: number) => {
    // Calculate pause end date
    const currentDate = new Date();
    const pauseEndDate = new Date();
    pauseEndDate.setMonth(currentDate.getMonth() + durationMonths);
    
    // In a real app, call API to pause subscription
    
    set({ 
      isPaused: true, 
      pauseEndDate: pauseEndDate.toISOString().split('T')[0]
    });
    
    return Promise.resolve();
  },
  
  cancelSubscription: async () => {
    // In a real app, call API to cancel subscription
    
    // Clear subscription data
    set({ 
      isPaused: false,
      pauseEndDate: null,
      // We could reset other fields or set a "canceled" flag
    });
    
    return Promise.resolve();
  }
}));






--------------------------------
Next file #15  // incomplete 
--------------------------------
Payment Form Component
Here's a component for processing payments:
--------------------------------
// components/membership/payment-form.tsx
'use client';

import { useState } from 'react';
import { useRouter } from 'next/navigation';
import { Card } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Button } from '@/components/ui/button';
import { useSubscriptionStore } from '@/store/subscription-store';

export default function PaymentForm() {
  const router = useRouter();
  const { currentPlan, monthlyPrice } = useSubscriptionStore();
  
  const [cardNumber, setCardNumber] = useState('');
  const [expiryDate, setExpiryDate] = useState('');
  const [cvv, setCvv] = useState('');
  const [zipCode, setZipCode] = useState('');
  const [isProcessing, setIsProcessing] = useState(false);
  
  // Terms acknowledgment
  const [cancelAcknowledge, setCancelAcknowledge] = useState(false);
  const [autoCancelAcknowledge, setAutoCancelAcknowledge] = useState(false);
  
  const canSubmit = cancelAcknowledge && autoCancelAcknowledge && 
                    cardNumber && expiryDate && cvv && zipCode;
  
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!canSubmit) return;
    
    setIsProcessing(true);
    
    try {
      // In a real app, call an API to process payment
      await new Promise(resolve => setTimeout(resolve, 1500)); // Simulate API call
      
      // Redirect to course selection
      router.push('/membership/course-selection');
    } catch (error) {
      console.error('Payment failed:', error);
      alert('Payment processing failed. Please try again.');
    } finally {
      setIsProcessing(false);
    }
  };
  
  // Format card number with spaces
  const formatCardNumber = (value: string) => {
    const v = value.replace(/\s+/g, '').replace(/[^0-9]/gi, '');
    const matches = v.match(/\d{4,16}/g);
    const match = matches && matches[0] || '';
    const parts = [];
    
    for (let i = 0, len = match.length; i < len; i += 4) {
      parts.push(match.substring(i, i + 4));
    }
    
    if (parts.length) {
      return parts.join(' ');
    } else {
      return value;
    }
  };
  
  // Format expiry date (MM/YY)
  const formatExpiryDate = (value: string) => {
    const v = value.replace(/\s+/g, '').replace(/[^0-9]/gi, '');
    
    if (v.length >= 2) {
      return `${v.substring(0, 2)}/${v.substring(2, 4)}`;
    }
    
    return v;
  };
  
  return (
    <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
      <div className="col-span-2">
        <Card className="p-6">
          <h2 className="text-xl font-semibold mb-6 pb-2 border-b">Payment Information</h2>
          
          <form onSubmit={handleSubmit}>
            <div className="mb-6">
              <h3 className="text-sm font-semibold text-gray-500 mb-4">Billing Information</h3>
              <div className="grid grid-cols-2 gap-4 mb-4">
                <div>
                  <label className="block text-sm text-gray-600 mb-1">First Name</label>
                  <Input defaultValue="Ry" required />
                </div>
                <div>
                  <label className="block text-sm text-gray-600 mb-1">Last Name</label>
                  <Input defaultValue="Di" required />
                </div>
              </div>
              
              <div className="mb-4">
                <label className="block text-sm text-gray-600 mb-1">Email Address</label>
                <Input type="email" defaultValue="ryan@ufl.edu" required />
              </div>
            </div>
            
            <div className="mb-6">
              <h3 className="text-sm font-semibold text-gray-500 mb-4">Payment Method</h3>
              
              <div className="flex gap-2 mb-2">
                <div className="py-1 px-2 text-xs bg-gray-100 rounded">Visa</div>
                <div className="py-1 px-2 text-xs bg-gray-100 rounded">MC</div>
                <div className="py-1 px-2 text-xs bg-gray-100 rounded">Amex</div>
                <div className="py-1 px-2 text-xs bg-gray-100 rounded">Disc</div>
              </div>
              
              <div className="mb-4">
                <label className="block text-sm text-gray-600 mb-1">Card Number</label>
                <Input 
                  value={cardNumber}
                  onChange={(e) => setCardNumber(formatCardNumber(e.target.value))}
                  placeholder="1234 5678 9012 3456"
                  maxLength={19}
                  required
                />
              </div>
              
              <div className="grid grid-cols-2 gap-4 mb-4">
                <div>
                  <label className="block text-sm text-gray-600 mb-1">Expiration Date</label>
                  <Input 
                    value={expiryDate}
                    onChange={(e) => setExpiryDate(formatExpiryDate(e.target.value))}
                    placeholder="MM/YY"
                    maxLength={5}
                    required
                  />
                </div>
                <div>
                  <label className="block text-sm text-gray-600 mb-1">Security Code (CVV)</label>
                  <Input 
                    value={cvv}
                    onChange={(e) => setCvv(e.target.value.replace(/\D/g, ''))}
                    placeholder="123"
                    maxLength={4}
                    required
                  />
                </div>
              </div>
              
              <div className="mb-4">
                <label className="block text-sm text-gray-600 mb-1">Billing Zip Code</label>
                <Input 
                  value={zipCode}
                  onChange={(e) => setZipCode(e.target.value.replace(/\D/g, ''))}
                  placeholder="32611"
                  maxLength={5}
                  required
                />
              </div>
            </div>
            
            <div className="bg-gray-50 p-4 rounded-md mt-6">
              <h3 className="font-semibold mb-3">Required Acknowledgments</h3>
              
              <div className="flex items-start gap-2 mb-3">
                <input
                  type="checkbox"
                  id="cancel-acknowledge"
                  checked={cancelAcknowledge}
                  onChange={() => setCancelAcknowledge(!cancelAcknowledge)}
                  className="mt-1"
                />
                <label htmlFor="cancel-acknowledge" className="text-sm">
                  I understand that I am responsible for canceling my subscription if I no longer wish to be charged.
                </label>
              </div>
              
              <div className="flex items-start gap-2">
                <input
                  type="checkbox"
                  id="auto-cancel-acknowledge"
                  checked={autoCancelAcknowledge}
                  onChange={() => setAutoCancelAcknowledge(!autoCancelAcknowledge)}
                  className="mt-1"
                />
                <label htmlFor="auto-cancel-acknowledge" className="text-sm">
                  I understand that my membership will NOT automatically cancel at the end of a course, exam, or semester.
                </label>
              </div>
              
              {!canSubmit && (
                <p className="text-primary-500 text-sm mt-3 font-medium">
                  Both acknowledgments are required to


--------------------------------
Next file #15
--------------------------------
Authentication System with Next.js App Router
For the authentication system, let's implement the login page using Next.js App Router:
--------------------------------
// app/auth/login/page.tsx
'use client';

import { useState } from 'react';
import Link from 'next/link';
import { useRouter } from 'next/navigation';
import { useAuthStore } from '@/store/auth-store';
import { Input } from '@/components/ui/input';
import { Button } from '@/components/ui/button';

export default function LoginPage() {
  const router = useRouter();
  const { login } = useAuthStore();
  
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [error, setError] = useState('');
  const [isLoggingIn, setIsLoggingIn] = useState(false);
  
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setError('');
    
    if (!email || !password) {
      setError('Please fill in all fields');
      return;
    }
    
    setIsLoggingIn(true);
    
    try {
      await login(email, password);
      router.push('/dashboard');
    } catch (error) {
      if (error instanceof Error) {
        setError(error.message);
      } else {
        setError('Login failed. Please check your credentials and try again.');
      }
    } finally {
      setIsLoggingIn(false);
    }
  };
  
  return (
    <div className="flex min-h-screen items-center justify-center bg-gray-50 py-12 px-4 sm:px-6 lg:px-8">
      <div className="w-full max-w-md space-y-8">
        <div className="text-center">
          <Link href="/" className="inline-block">
            <h1 className="font-serif text-4xl italic text-primary-500 mb-2">
              Smokin&apos;Notes
            </h1>
          </Link>
          <h2 className="text-center text-3xl font-bold tracking-tight text-gray-900">
            Sign in to your account
          </h2>
          <p className="mt-2 text-center text-sm text-gray-600">
            Or{' '}
            <Link 
              href="/auth/sign-up" 
              className="font-medium text-primary-500 hover:text-primary-600"
            >
              get started for free
            </Link>
          </p>
        </div>
        
        <div className="mt-8 bg-white py-8 px-4 shadow sm:rounded-lg sm:px-10">
          <form className="space-y-6" onSubmit={handleSubmit}>
            {error && (
              <div className="bg-red-50 border-l-4 border-red-500 p-4 text-sm text-red-700">
                {error}
              </div>
            )}
            
            <div>
              <label 
                htmlFor="email" 
                className="block text-sm font-medium text-gray-700"
              >
                UFL Email Address
              </label>
              <div className="mt-1">
                <Input
                  id="email"
                  name="email"
                  type="email"
                  autoComplete="email"
                  required
                  value={email}
                  onChange={(e) => setEmail(e.target.value)}
                  className="w-full"
                />
              </div>
            </div>
            
            <div>
              <label 
                htmlFor="password" 
                className="block text-sm font-medium text-gray-700 flex justify-between"
              >
                <span>Password</span>
                <Link 
                  href="/auth/forgot-password" 
                  className="text-sm text-primary-500 hover:text-primary-600"
                >
                  Forgot your password?
                </Link>
              </label>
              <div className="mt-1">
                <Input
                  id="password"
                  name="password"
                  type="password"
                  autoComplete="current-password"
                  required
                  value={password}
                  onChange={(e) => setPassword(e.target.value)}
                  className="w-full"
                />
              </div>
            </div>
            
            <div className="flex items-center justify-between">
              <div className="flex items-center">
                <input
                  id="remember-me"
                  name="remember-me"
                  type="checkbox"
                  className="h-4 w-4 rounded border-gray-300 text-primary-600 focus:ring-primary-500"
                />
                <label htmlFor="remember-me" className="ml-2 block text-sm text-gray-900">
                  Remember me
                </label>
              </div>
            </div>
            
            <div>
              <Button
                type="submit"
                disabled={isLoggingIn}
                className="w-full flex justify-center py-2 px-4"
              >
                {isLoggingIn ? 'Signing in...' : 'Sign in'}
              </Button>
            </div>
          </form>
        </div>
      </div>
    </div>
  );
}


--------------------------------
Next file #16
--------------------------------
}
Auth Layout for Authentication Pages
Create a specific layout for all authentication pages:
--------------------------------
// app/auth/layout.tsx
import { ReactNode } from 'react';

export default function AuthLayout({ children }: { children: ReactNode }) {
  return (
    <div className="min-h-screen bg-gray-50">
      {children}
    </div>
  );
}


--------------------------------
Next file #17
--------------------------------
Sign-up Page
--------------------------------
// app/auth/sign-up/page.tsx
'use client';

import { useState } from 'react';
import Link from 'next/link';
import { useRouter } from 'next/navigation';
import { Input } from '@/components/ui/input';
import { Button } from '@/components/ui/button';

export default function SignUpPage() {
  const router = useRouter();
  const [email, setEmail] = useState('');
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [error, setError] = useState('');
  const [showSuccess, setShowSuccess] = useState(false);
  
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setError('');
    
    // Simple validation
    if (!email) {
      setError('Please enter your email address');
      return;
    }
    
    // UFL email validation
    if (!email.toLowerCase().endsWith('ufl.edu')) {
      setError('Please use your UFL.edu email address');
      return;
    }
    
    setIsSubmitting(true);
    
    try {
      // In a real app, call API to create account
      await new Promise(resolve => setTimeout(resolve, 1000)); // Simulate API call
      
      // Show success message
      setShowSuccess(true);
      
      // In a real app, redirect after email verification
      setTimeout(() => {
        router.push('/auth/verify-email?email=' + encodeURIComponent(email));
      }, 2000);
    } catch (error) {
      setError('Account creation failed. Please try again.');
    } finally {
      setIsSubmitting(false);
    }
  };
  
  return (
    <div className="flex min-h-screen items-center justify-center py-12 px-4 sm:px-6 lg:px-8">
      <div className="w-full max-w-md">
        <div className="bg-white shadow-md rounded-lg overflow-hidden">
          <div className="px-8 pt-8 pb-6 text-center">
            <h1 className="font-serif text-4xl italic text-primary-500 mb-4">
              Smokin&apos;Notes
            </h1>
            <h2 className="text-2xl font-bold text-gray-900 mb-2">
              Get started for free
            </h2>
            <p className="text-gray-600 text-sm">
              Join over 100,000 UF students who've boosted their GPA with our study guides!
            </p>
          </div>
          
          <div className="px-8 pb-8">
            {showSuccess ? (
              <div className="bg-green-50 p-4 rounded-md text-green-700 mb-4">
                <div className="flex items-center">
                  <svg className="h-5 w-5 text-green-500 mr-2" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                    <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clipRule="evenodd" />
                  </svg>
                  <p>Check your email for a verification link to continue.</p>
                </div>
              </div>
            ) : (
              <form onSubmit={handleSubmit} className="space-y-4">
                {error && (
                  <div className="bg-red-50 border-l-4 border-red-500 p-4 text-sm text-red-700">
                    {error}
                  </div>
                )}
                
                <div>
                  <div className="flex">
                    <Input
                      type="email"
                      placeholder="Enter your UFL.edu email"
                      value={email}
                      onChange={(e) => setEmail(e.target.value)}
                      required
                      className="rounded-r-none"
                    />
                    <Button 
                      type="submit" 
                      disabled={isSubmitting}
                      className="rounded-l-none"
                    >
                      {isSubmitting ? 'Starting...' : 'Start'}
                    </Button>
                  </div>
                </div>
                
                <div className="flex justify-center space-x-4 mt-4">
                  <div className="flex items-center">
                    <svg className="h-5 w-5 text-primary-500 mr-1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                      <path fillRule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clipRule="evenodd" />
                    </svg>
                    <span className="text-sm">7-day free trial</span>
                  </div>
                  
                  <div className="flex items-center">
                    <svg className="h-5 w-5 text-primary-500 mr-1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                      <path fillRule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clipRule="evenodd" />
                    </svg>
                    <span className="text-sm">Cancel anytime</span>
                  </div>
                </div>
              </form>
            )}
            
            <p className="text-xs text-center text-gray-500 mt-6">
              By signing up, you agree to our{' '}
              <Link href="/terms" className="text-primary-500 hover:text-primary-600">
                Terms of Service
              </Link>{' '}
              and{' '}
              <Link href="/privacy" className="text-primary-500 hover:text-primary-600">
                Privacy Policy
              </Link>
            </p>
          </div>
        </div>
        
        <div className="text-center mt-4">
          <p className="text-sm text-gray-600">
            Already have an account?{' '}
            <Link href="/auth/login" className="text-primary-500 hover:text-primary-600 font-medium">
              Sign in
            </Link>
          </p>
        </div>
      </div>
    </div>
  );
}


--------------------------------
Next file #18
--------------------------------
UI Components
Let's define some reusable UI components:
--------------------------------
// components/ui/button.tsx
import { forwardRef } from 'react';
import { cn } from '@/lib/utils';

export interface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {
  variant?: 'default' | 'outline' | 'ghost' | 'link';
  size?: 'default' | 'sm' | 'lg';
}

const Button = forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant = 'default', size = 'default', ...props }, ref) => {
    return (
      <button
        className={cn(
          'inline-flex items-center justify-center rounded-md font-medium transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring disabled:opacity-50 disabled:pointer-events-none',
          {
            'bg-primary-500 text-white hover:bg-primary-600 active:bg-primary-700': variant === 'default',
            'border border-input bg-background hover:bg-gray-50 hover:text-primary-500': variant === 'outline',
            'hover:bg-gray-100 hover:text-primary-500': variant === 'ghost',
            'text-primary-500 underline-offset-4 hover:underline': variant === 'link',
            'h-10 py-2 px-4': size === 'default',
            'h-9 px-3 rounded-md text-sm': size === 'sm',
            'h-11 px-8 rounded-md': size === 'lg',
          },
          className
        )}
        ref={ref}
        {...props}
      />
    );
  }
);

Button.displayName = 'Button';

export { Button };



--------------------------------
Next file #19
--------------------------------
// components/ui/card.tsx
--------------------------------
// components/ui/card.tsx
import { forwardRef } from 'react';
import { cn } from '@/lib/utils';

const Card = forwardRef
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      'rounded-lg border border-gray-200 bg-white text-gray-900 shadow-sm',
      className
    )}
    {...props}
  />
));
Card.displayName = 'Card';

const CardHeader = forwardRef
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn('flex flex-col space-y-1.5 p-6', className)}
    {...props}
  />
));
CardHeader.displayName = 'CardHeader';

const CardTitle = forwardRef
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h3
    ref={ref}
    className={cn(
      'text-xl font-semibold leading-none tracking-tight',
      className
    )}
    {...props}
  />
));
CardTitle.displayName = 'CardTitle';

const CardDescription = forwardRef
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <p
    ref={ref}
    className={cn('text-sm text-gray-500', className)}
    {...props}
  />
));
CardDescription.displayName = 'CardDescription';

const CardContent = forwardRef
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn('p-6 pt-0', className)} {...props} />
));
CardContent.displayName = 'CardContent';

const CardFooter = forwardRef
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn('flex items-center p-6 pt-0', className)}
    {...props}
  />
));
CardFooter.displayName = 'CardFooter';

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent };



--------------------------------
Next file #20
--------------------------------
// components/ui/input.tsx
--------------------------------
// components/ui/input.tsx
import { forwardRef } from 'react';
import { cn } from '@/lib/utils';

export interface InputProps
  extends React.InputHTMLAttributes<HTMLInputElement> {}

const Input = forwardRef<HTMLInputElement, InputProps>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          'flex h-10 w-full rounded-md border border-gray-300 bg-white px-3 py-2 text-sm',
          'placeholder:text-gray-400 focus:outline-none focus:border-primary-500 focus:ring-1 focus:ring-primary-500',
          'disabled:cursor-not-allowed disabled:opacity-50',
          className
        )}
        ref={ref}
        {...props}
      />
    );
  }
);
Input.displayName = 'Input';

export { Input };


--------------------------------
Next file #21
--------------------------------
Utility Functions
--------------------------------
// lib/utils.ts
import { ClassValue, clsx } from 'clsx';
import { twMerge } from 'tailwind-merge';

// Helper for combining Tailwind classes with clsx
export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs));
}

// Format date to display in a consistent way
export function formatDate(date: Date | string): string {
  const d = typeof date === 'string' ? new Date(date) : date;
  return d.toLocaleDateString('en-US', {
    year: 'numeric',
    month: 'long',
    day: 'numeric',
  });
}

// Format currency for display
export function formatCurrency(amount: number): string {
  return new Intl.NumberFormat('en-US', {
    style: 'currency',
    currency: 'USD',
  }).format(amount);
}

// Truncate text to a specified length
export function truncateText(text: string, maxLength: number): string {
  if (text.length <= maxLength) return text;
  return text.substring(0, maxLength) + '...';
}

// Validate email format
export function isValidEmail(email: string): boolean {
  const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
  return emailRegex.test(email);
}

// Validate UFL email specifically
export function isValidUFLEmail(email: string): boolean {
  return email.toLowerCase().endsWith('ufl.edu');
}


--------------------------------
Next file #21
--------------------------------
Root Layout for the Entire Application
--------------------------------
// app/layout.tsx
import { Metadata } from 'next';
import { Inter } from 'next/font/google';
import '@/styles/globals.css';

const inter = Inter({ subsets: ['latin'] });

export const metadata: Metadata = {
  title: 'Smokin\'Notes - UF\'s #1 Study Resource',
  description: 'Boost your grades with Smokin\'Notes - the premier study resource for University of Florida students.',
};

export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <html lang="en">
      <body className={inter.className}>
        {children}
      </body>
    </html>
  );
}



--------------------------------
Next file #22
--------------------------------
Dashboard Layout for Authenticated Pages
--------------------------------
// app/(dashboard)/layout.tsx
import { ReactNode } from 'react';
import Header from '@/components/layout/header';
import Footer from '@/components/layout/footer';
import { Toaster } from '@/components/ui/toaster';

export default function DashboardLayout({ children }: { children: ReactNode }) {
  return (
    <div className="flex flex-col min-h-screen">
      <Header />
      <main className="flex-1 bg-gray-50">
        {children}
      </main>
      <Footer />
      <Toaster />
    </div>
  );
}



--------------------------------
Next file #22
--------------------------------
Dashboard Home Page
--------------------------------
// app/(dashboard)/dashboard/page.tsx
'use client';

import { useEffect } from 'react';
import Link from 'next/link';
import { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { useCourseStore } from '@/store/course-store';
import { useUserStore } from '@/store/user-store';
import { useSubscriptionStore } from '@/store/subscription-store';

export default function DashboardPage() {
  const { profile, fetchProfile } = useUserStore();
  const { selectedCourses, fetchCourses } = useCourseStore();
  const { currentPlan, monthlyPrice, nextBillingDate } = useSubscriptionStore();
  
  useEffect(() => {
    fetchProfile();
    fetchCourses();
  }, [fetchProfile, fetchCourses]);
  
  return (
    <div className="container mx-auto px-4 py-8">
      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
        <div className="md:col-span-2">
          <h1 className="text-2xl font-bold mb-6">Welcome back, {profile?.firstName || 'Student'}!</h1>
          
          <Card className="mb-6">
            <CardHeader>
              <CardTitle>My Courses</CardTitle>
            </CardHeader>
            <CardContent>
              {selectedCourses.length > 0 ? (
                <div className="space-y-4">
                  {selectedCourses.map(course => (
                    <div key={course.code} className="p-4 bg-white border rounded-lg flex justify-between items-center">
                      <div>
                        <h3 className="font-medium">{course.code} - {course.name}</h3>
                        <p className="text-sm text-gray-500">{course.term}</p>
                      </div>
                      <Link href={`/courses/${course.code}`}>
                        <Button variant="outline" size="sm">View Materials</Button>
                      </Link>
                    </div>
                  ))}
                </div>
              ) : (
                <div className="text-center py-8">
                  <p className="text-gray-500 mb-4">You haven't selected any courses yet</p>
                  <Link href="/account/courses">
                    <Button>Add Courses</Button>
                  </Link>
                </div>
              )}
            </CardContent>
          </Card>
          
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
            <Card>
              <CardHeader>
                <CardTitle>Recent Activity</CardTitle>
              </CardHeader>
              <CardContent>
                <ul className="space-y-2">
                  <li className="text-sm py-2 border-b">
                    <span className="text-gray-500">Yesterday</span> - You viewed Biology I study materials
                  </li>
                  <li className="text-sm py-2 border-b">
                    <span className="text-gray-500">3 days ago</span> - You completed a practice quiz
                  </li>
                  <li className="text-sm py-2">
                    <span className="text-gray-500">Last week</span> - You added a new course
                  </li>
                </ul>
              </CardContent>
            </Card>
            
            <Card>
              <CardHeader>
                <CardTitle>Upcoming Deadlines</CardTitle>
              </CardHeader>
              <CardContent>
                <ul className="space-y-2">
                  <li className="text-sm py-2 border-b flex justify-between">
                    <span>Biology Midterm</span>
                    <span className="text-red-500">3 days left</span>
                  </li>
                  <li className="text-sm py-2 border-b flex justify-between">
                    <span>Economics Paper</span>
                    <span className="text-amber-500">1 week left</span>
                  </li>
                  <li className="text-sm py-2 flex justify-between">
                    <span>Chemistry Lab</span>
                    <span className="text-green-500">2 weeks left</span>
                  </li>
                </ul>
              </CardContent>
            </Card>
          </div>
        </div>
        
        <div>
          <Card className="mb-6">
            <CardHeader>
              <CardTitle>Subscription Status</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                <div>
                  <p className="text-sm text-gray-500">Current Plan</p>
                  <p className="font-medium">{currentPlan.replace('-', ' ').toUpperCase()} PLAN</p>
                </div>
                
                <div>
                  <p className="text-sm text-gray-500">Monthly Price</p>
                  <p className="font-medium">${monthlyPrice}.00</p>
                </div>
                
                <div>
                  <p className="text-sm text-gray-500">Next Billing Date</p>
                  <p className="font-medium">{nextBillingDate}</p>
                </div>
                
                <div className="pt-4">
                  <Link href="/account/subscription">
                    <Button variant="outline" className="w-full">Manage Subscription</Button>
                  </Link>
                </div>
              </div>
            </CardContent>
          </Card>
          
          <Card>
            <CardHeader>
              <CardTitle>Need Help?</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                <p className="text-sm text-gray-500">
                  Our support team is always available to assist you with any questions or issues.
                </p>
                <Link href="/help">
                  <Button variant="outline" className="w-full">Contact Support</Button>
                </Link>
              </div>
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  );
}


--------------------------------
Next file #23
--------------------------------
Root CSS File with Tailwind Directives
--------------------------------
/* styles/globals.css */
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 0 0% 3.9%;
    --card: 0 0% 100%;
    --card-foreground: 0 0% 3.9%;
    --popover: 0 0% 100%;
    --popover-foreground: 0 0% 3.9%;
    --primary: 0 73% 50%;
    --primary-foreground: 0 0% 98%;
    --secondary: 0 0% 96.1%;
    --secondary-foreground: 0 0% 9%;
    --muted: 0 0% 96.1%;
    --muted-foreground: 0 0% 45.1%;
    --accent: 0 0% 96.1%;
    --accent-foreground: 0 0% 9%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 0 0% 98%;
    --border: 0 0% 89.8%;
    --input: 0 0% 89.8%;
    --ring: 0 73% 50%;
    --radius: 0.5rem;
  }

  .dark {
    --background: 0 0% 3.9%;
    --foreground: 0 0% 98%;
    --card: 0 0% 3.9%;
    --card-foreground: 0 0% 98%;
    --popover: 0 0% 3.9%;
    --popover-foreground: 0 0% 98%;
    --primary: 0 73% 50%;
    --primary-foreground: 0 0% 98%;
    --secondary: 0 0% 14.9%;
    --secondary-foreground: 0 0% 98%;
    --muted: 0 0% 14.9%;
    --muted-foreground: 0 0% 63.9%;
    --accent: 0 0% 14.9%;
    --accent-foreground: 0 0% 98%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 0 0% 98%;
    --border: 0 0% 14.9%;
    --input: 0 0% 14.9%;
    --ring: 0 73% 50%;
  }
}

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
}


--------------------------------
Next file #24
--------------------------------
Middleware for Authentication Protection
Create a middleware file to protect authenticated routes:
--------------------------------
// middleware.ts
import { NextResponse } from 'next/server';
import type { NextRequest } from 'next/server';

export function middleware(request: NextRequest) {
  const currentUser = request.cookies.get('authToken')?.value;
  
  // Protected routes that require authentication
  const protectedRoutes = [
    '/dashboard',
    '/account',
    '/membership/course-selection',
    '/courses',
  ];
  
  // Exact auth routes that should redirect to dashboard if already logged in
  const authRoutes = [
    '/auth/login',
    '/auth/sign-up',
    '/auth/forgot-password',
  ];
  
  const isProtectedRoute = protectedRoutes.some(route => 
    request.nextUrl.pathname.startsWith(route)
  );
  
  const isAuthRoute = authRoutes.some(route => 
    request.nextUrl.pathname === route
  );
  
  // If trying to access protected route without being logged in
  if (isProtectedRoute && !currentUser) {
    const url = new URL('/auth/login', request.url);
    url.searchParams.set('redirectTo', request.nextUrl.pathname);
    return NextResponse.redirect(url);
  }
  
  // If trying to access auth routes while already logged in
  if (isAuthRoute && currentUser) {
    return NextResponse.redirect(new URL('/dashboard', request.url));
  }
  
  return NextResponse.next();
}

// Match against protected routes and auth routes
export const config = {
  matcher: [
    '/dashboard/:path*',
    '/account/:path*', 
    '/membership/course-selection

export const config = {
  matcher: [
    '/dashboard/:path*',
    '/account/:path*', 
    '/membership/course-selection/:path*',
    '/courses/:path*',
    '/auth/login',
    '/auth/sign-up',
    '/auth/forgot-password',
  ],
};



--------------------------------
Next file #25
--------------------------------
Footer Component
--------------------------------
// components/layout/footer.tsx
import Link from 'next/link';

export default function Footer() {
  const currentYear = new Date().getFullYear();
  
  return (
    <footer className="bg-white border-t border-gray-200 py-4 px-8 text-sm text-gray-600">
      <div className="container mx-auto flex flex-col md:flex-row justify-between items-center">
        <div>© {currentYear} Smokin'Notes Inc. All rights reserved.</div>
        <div className="flex gap-4 mt-4 md:mt-0">
          <Link href="/privacy" className="hover:text-primary-500 transition-colors">
            Privacy
          </Link>
          <Link href="/terms" className="hover:text-primary-500 transition-colors">
            Terms
          </Link>
          <Link href="/help" className="hover:text-primary-500 transition-colors">
            Help
          </Link>
          <Link href="/contact" className="hover:text-primary-500 transition-colors">
            Contact
          </Link>
        </div>
      </div>
    </footer>
  );
}


--------------------------------
Next file #26
--------------------------------
Account Page with Tab Navigation
--------------------------------
// app/account/page.tsx
'use client';

import { useState } from 'react';
import { useRouter } from 'next/navigation';
import { Tabs, TabsList, TabsTrigger, TabsContent } from '@/components/ui/tabs';
import ProfileTab from '@/components/account/profile-tab';
import BillingTab from '@/components/account/billing-tab';
import SubscriptionTab from '@/components/account/subscription-tab';
import PasswordTab from '@/components/account/password-tab';

export default function AccountPage() {
  const router = useRouter();
  const [activeTab, setActiveTab] = useState('profile');
  
  const handleTabChange = (value: string) => {
    setActiveTab(value);
    
    // Update the URL to reflect the current tab
    switch (value) {
      case 'billing':
        router.push('/account/billing');
        break;
      case 'subscription':
        router.push('/account/subscription');
        break;
      case 'password':
        router.push('/account/password');
        break;
      default:
        router.push('/account');
        break;
    }
  };
  
  return (
    <div className="container mx-auto p-6">
      <h1 className="text-2xl font-bold mb-6">Account Settings</h1>
      
      <Tabs value={activeTab} onValueChange={handleTabChange} className="w-full">
        <TabsList className="mb-6">
          <TabsTrigger value="profile">Profile</TabsTrigger>
          <TabsTrigger value="billing">Billing</TabsTrigger>
          <TabsTrigger value="subscription">Subscription</TabsTrigger>
          <TabsTrigger value="password">Password</TabsTrigger>
        </TabsList>
        
        <TabsContent value="profile">
          <ProfileTab />
        </TabsContent>
        
        <TabsContent value="billing">
          <BillingTab />
        </TabsContent>
        
        <TabsContent value="subscription">
          <SubscriptionTab />
        </TabsContent>
        
        <TabsContent value="password">
          <PasswordTab />
        </TabsContent>
      </Tabs>
    </div>
  );
}



--------------------------------
Next file #27
--------------------------------
Profile Tab Component
--------------------------------
// components/account/profile-tab.tsx
'use client';

import { useEffect, useState } from 'react';
import { useRouter } from 'next/navigation';
import { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { useToast } from '@/components/ui/use-toast';
import { useUserStore } from '@/store/user-store';

export default function ProfileTab() {
  const router = useRouter();
  const { toast } = useToast();
  const { profile, isLoading, fetchProfile, updateProfile } = useUserStore();
  
  const [formData, setFormData] = useState({
    firstName: '',
    lastName: '',
    contactEmail: '',
    phone: '',
    major: '',
    status: '',
  });
  
  const [isEditing, setIsEditing] = useState(false);
  
  useEffect(() => {
    fetchProfile();
  }, [fetchProfile]);
  
  useEffect(() => {
    if (profile) {
      setFormData({
        firstName: profile.firstName,
        lastName: profile.lastName,
        contactEmail: profile.contactEmail,
        phone: profile.phone,
        major: profile.major,
        status: profile.status,
      });
    }
  }, [profile]);
  
  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
  };
  
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    try {
      await updateProfile(formData);
      setIsEditing(false);
      
      toast({
        title: 'Profile Updated',
        description: 'Your profile information has been successfully updated.',
        variant: 'success',
      });
    } catch (error) {
      toast({
        title: 'Update Failed',
        description: 'There was an error updating your profile. Please try again.',
        variant: 'destructive',
      });
    }
  };
  
  if (isLoading) {
    return <div className="flex justify-center py-10">Loading profile data...</div>;
  }
  
  if (!profile) {
    return (
      <div className="flex flex-col items-center py-10">
        <p className="mb-4">Could not load profile data.</p>
        <Button onClick={() => fetchProfile()}>Retry</Button>
      </div>
    );
  }
  
  return (
    <div>
      <Card className="mb-6">
        <CardHeader>
          <CardTitle>Personal Information</CardTitle>
        </CardHeader>
        <CardContent>
          {isEditing ? (
            <form onSubmit={handleSubmit} className="space-y-4">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    First Name
                  </label>
                  <Input
                    name="firstName"
                    value={formData.firstName}
                    onChange={handleInputChange}
                    required
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Last Name
                  </label>
                  <Input
                    name="lastName"
                    value={formData.lastName}
                    onChange={handleInputChange}
                    required
                  />
                </div>
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  UFL Email Address
                </label>
                <Input
                  value={profile.email}
                  disabled
                  className="bg-gray-100"
                />
                <p className="text-xs text-gray-500 mt-1">Cannot be changed</p>
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Contact Email
                </label>
                <Input
                  name="contactEmail"
                  type="email"
                  value={formData.contactEmail}
                  onChange={handleInputChange}
                />
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Phone Number
                </label>
                <Input
                  name="phone"
                  type="tel"
                  value={formData.phone}
                  onChange={handleInputChange}
                />
              </div>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Major
                  </label>
                  <select
                    name="major"
                    value={formData.major}
                    onChange={handleInputChange}
                    className="w-full border border-gray-300 rounded-md p-2"
                  >
                    <option value="">Select a major</option>
                    <option value="Accounting">Accounting</option>
                    <option value="Agricultural and Life Sciences">Agricultural and Life Sciences</option>
                    <option value="Arts">Arts</option>
                    <option value="Biology">Biology</option>
                    <option value="Business Administration">Business Administration</option>
                    <option value="Chemistry">Chemistry</option>
                    <option value="Computer and Information Sciences">Computer and Information Sciences</option>
                    <option value="Communications & Media">Communications & Media</option>
                    <option value="Economics">Economics</option>
                    <option value="Education">Education</option>
                    <option value="Engineering">Engineering</option>
                    <option value="Environmental Science/Sustainability">Environmental Science/Sustainability</option>
                    <option value="Finance">Finance</option>
                    <option value="Health Sciences">Health Sciences</option>
                    <option value="Humanities & Social Sciences">Humanities & Social Sciences</option>
                    <option value="Marketing">Marketing</option>
                    <option value="Management">Management</option>
                    <option value="Mathematics">Mathematics</option>
                    <option value="Medicine">Medicine</option>
                    <option value="Nursing">Nursing</option>
                    <option value="Psychology">Psychology</option>
                    <option value="Public Health">Public Health</option>
                    <option value="Undecided">Undecided</option>
                    <option value="Other">Other</option>
                  </select>
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Status
                  </label>
                  <select
                    name="status"
                    value={formData.status}
                    onChange={handleInputChange}
                    className="w-full border border-gray-300 rounded-md p-2"
                  >
                    <option value="">Select your status</option>
                    <option value="c/o '28">c/o '28</option>
                    <option value="c/o '27">c/o '27</option>
                    <option value="c/o '26">c/o '26</option>
                    <option value="c/o '25">c/o '25</option>
                    <option value="Already Graduated">Already Graduated</option>
                  </select>
                </div>
              </div>
              
              <div className="flex gap-3 pt-4">
                <Button type="submit">Save Changes</Button>
                <Button 
                  type="button" 
                  variant="outline" 
                  onClick={() => setIsEditing(false)}
                >
                  Cancel
                </Button>
              </div>
            </form>
          ) : (
            <div className="space-y-4">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <InfoRow label="Name" value={`${profile.firstName} ${profile.lastName}`} />
                <InfoRow label="UFL Email" value={profile.email} />
              </div>
              
              <InfoRow label="Contact Email" value={profile.contactEmail || '-'} />
              <InfoRow label="Phone" value={profile.phone || '-'} />
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <InfoRow label="Major" value={profile.major || '-'} />
                <InfoRow label="Status" value={profile.status || '-'} />
              </div>
              
              <div className="pt-4">
                <Button onClick={() => setIsEditing(true)}>Edit Profile</Button>
              </div>
            </div>
          )}
        </CardContent>
      </Card>
      
      <Card>
        <CardHeader>
          <CardTitle>Account Information</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            <InfoRow label="Member Since" value="January 15, 2025" />
            <InfoRow label="Account Type" value="Student" />
            
            <div className="pt-4">
              <Button 
                variant="outline" 
                className="text-red-500 border-red-300 hover:bg-red-50"
                onClick={() => router.push('/account/delete')}
              >
                Delete Account
              </Button>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}

function InfoRow({ label, value }: { label: string; value: string }) {
  return (
    <div className="flex border-b border-gray-100 py-2">
      <div className="w-36 text-gray-500">{label}</div>
      <div className="flex-1 font-medium">{value}</div>
    </div>
  );
}



--------------------------------
Next file #28
--------------------------------
Subscription Tab Component
--------------------------------
// components/account/subscription-tab.tsx
'use client';

import { useEffect, useState } from 'react';
import { useRouter } from 'next/navigation';
import { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { useSubscriptionStore } from '@/store/subscription-store';
import { useCourseStore } from '@/store/course-store';
import { formatCurrency } from '@/lib/utils';

export default function SubscriptionTab() {
  const router = useRouter();
  const { 
    currentPlan, 
    monthlyPrice, 
    nextBillingDate, 
    currentPeriod,
    isPaused,
    pauseEndDate
  } = useSubscriptionStore();
  
  const { selectedCourses } = useCourseStore();
  
  const [displayPlan, setDisplayPlan] = useState('');
  
  useEffect(() => {
    // Format the plan name for display
    switch (currentPlan) {
      case '1-course':
        setDisplayPlan('1 Course Plan');
        break;
      case '2-course':
        setDisplayPlan('2 Course Plan');
        break;
      case '3-course':
        setDisplayPlan('3 Course Plan');
        break;
      default:
        setDisplayPlan('Unknown Plan');
    }
  }, [currentPlan]);
  
  return (
    <div>
      <Card className="mb-6">
        <CardHeader>
          <CardTitle>Subscription Summary</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="bg-primary-50 p-5 rounded-lg flex items-start gap-4">
            <div className="p-3 bg-white rounded-full text-2xl text-primary-500">
              📚
            </div>
            <div>
              <div className="text-lg font-semibold flex items-center gap-2">
                {displayPlan}
                {isPaused && (
                  <span className="bg-amber-100 text-amber-800 text-xs font-medium py-0.5 px-2 rounded-full">
                    Paused
                  </span>
                )}
              </div>
              <div className="bg-green-100 text-green-800 inline-block py-0.5 px-2 rounded-full text-xs font-medium mt-1 mb-2">
                Active
              </div>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mt-4">
                <div>
                  <div className="text-sm text-gray-500">Monthly Price</div>
                  <div className="font-semibold">{formatCurrency(monthlyPrice)}</div>
                </div>
                
                <div>
                  <div className="text-sm text-gray-500">Next Billing Date</div>
                  <div className="font-semibold">{isPaused ? 'Paused until ' + pauseEndDate : nextBillingDate}</div>
                </div>
                
                <div>
                  <div className="text-sm text-gray-500">Current Period</div>
                  <div className="font-semibold">{currentPeriod.start} - {currentPeriod.end}</div>
                </div>
                
                <div>
                  <div className="text-sm text-gray-500">Course Access</div>
                  <div className="font-semibold">{selectedCourses.length} of {currentPlan.split('-')[0]} courses</div>
                </div>
              </div>
              
              <div className="flex gap-3 mt-6">
                <Button 
                  onClick={() => router.push('/account/switch-plan')}
                >
                  Switch Plan
                </Button>
                <Button 
                  variant="outline"
                  onClick={() => router.push('/account/cancel-membership')}
                  className="text-red-500 border-red-200 hover:bg-red-50"
                >
                  Cancel Membership
                </Button>
              </div>
            </div>
          </div>
        </CardContent>
      </Card>
      
      <Card className="mb-6">
        <CardHeader>
          <CardTitle>Current Course Access</CardTitle>
        </CardHeader>
        <CardContent>
          <p className="mb-4">Your membership gives you access to {currentPlan.split('-')[0]} courses at a time. Here are your current active courses:</p>
          
          {selectedCourses.length > 0 ? (
            <div className="space-y-3">
              {selectedCourses.map(course => (
                <div 
                  key={course.code} 
                  className="border border-gray-200 rounded-lg p-4 flex items-center"
                >
                  <div className="w-10 h-10 bg-primary-100 text-primary-500 rounded-md flex items-center justify-center font-bold mr-4">
                    {course.code.substring(0, 2)}
                  </div>
                  <div className="flex-1">
                    <div className="font-medium">{course.code} - {course.name}</div>
                    <div className="text-sm text-gray-500">Access to complete study materials including notes, practice exams, and tutorial videos.</div>
                  </div>
                  <div className="bg-green-100 text-green-800 py-1 px-2 rounded-full text-xs font-medium">
                    Active
                  </div>
                </div>
              ))}
            </div>
          ) : (
            <div className="bg-amber-50 border-l-4 border-amber-400 p-4">
              <p className="text-amber-800">You haven't selected any courses yet. Add courses to start studying!</p>
            </div>
          )}
          
          <div className="mt-4">
            <Button 
              variant="outline"
              onClick={() => router.push('/account/courses')}
            >
              Manage Courses
            </Button>
          </div>
        </CardContent>
      </Card>
      
      <Card>
        <CardHeader>
          <CardTitle>Billing History</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="overflow-auto">
            <table className="w-full min-w-[500px]">
              <thead>
                <tr className="border-b">
                  <th className="text-left py-3 px-2 font-medium text-gray-600">Date</th>
                  <th className="text-left py-3 px-2 font-medium text-gray-600">Amount</th>
                  <th className="text-left py-3 px-2 font-medium text-gray-600">Status</th>
                  <th className="text-left py-3 px-2 font-medium text-gray-600">Receipt</th>
                </tr>
              </thead>
              <tbody>
                <tr className="border-b hover:bg-gray-50">
                  <td className="py-3 px-2">Mar 15, 2025</td>
                  <td className="py-3 px-2">{formatCurrency(monthlyPrice)}</td>
                  <td className="py-3 px-2">
                    <span className="bg-green-100 text-green-800 py-0.5 px-2 rounded-full text-xs font-medium">
                      Paid
                    </span>
                  </td>
                  <td className="py-3 px-2">
                    <a href="#" className="text-primary-500 hover:underline">View</a>
                  </td>
                </tr>
                <tr className="border-b hover:bg-gray-50">
                  <td className="py-3 px-2">Feb 15, 2025</td>
                  <td className="py-3 px-2">{formatCurrency(monthlyPrice)}</td>
                  <td className="py-3 px-2">
                    <span className="bg-green-100 text-green-800 py-0.5 px-2 rounded-full text-xs font-medium">
                      Paid
                    </span>
                  </td>
                  <td className="py-3 px-2">
                    <a href="#" className="text-primary-500 hover:underline">View</a>
                  </td>
                </tr>
                <tr className="hover:bg-gray-50">
                  <td className="py-3 px-2">Jan 15, 2025</td>
                  <td className="py-3 px-2">{formatCurrency(monthlyPrice)}</td>
                  <td className="py-3 px-2">
                    <span className="bg-green-100 text-green-800 py-0.5 px-2 rounded-full text-xs font-medium">
                      Paid
                    </span>
                  </td>
                  <td className="py-3 px-2">
                    <a href="#" className="text-primary-500 hover:underline">View</a>
                  </td>
                </tr>
              </tbody>
            </table>
          </div>
          
          <div className="mt-4">
            <Button 
              variant="outline"
              onClick={() => router.push('/account/billing')}
            >
              View All Transactions
            </Button>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}



--------------------------------
Next file #29
--------------------------------
Toast Component for Notifications
--------------------------------
// components/ui/toast.tsx
'use client';

import { useState, createContext, useContext } from 'react';
import { X } from 'lucide-react';
import { cn } from '@/lib/utils';

type ToastProps = {
  id: string;
  title?: string;
  description?: string;
  action?: React.ReactNode;
  variant?: 'default' | 'destructive' | 'success';
};

type ToastContextType = {
  toasts: ToastProps[];
  toast: (props: Omit<ToastProps, 'id'>) => void;
  dismiss: (id: string) => void;
};

const ToastContext = createContext<ToastContextType | undefined>(undefined);

export function ToastProvider({ children }: { children: React.ReactNode }) {
  const [toasts, setToasts] = useState<ToastProps[]>([]);

  const toast = (props: Omit<ToastProps, 'id'>) => {
    const id = Math.random().toString(36).substr(2, 9);
    setToasts((prev) => [...prev, { id, ...props }]);
    
    // Auto dismiss after 5 seconds
    setTimeout(() => {
      dismiss(id);
    }, 5000);
  };

  const dismiss = (id: string) => {
    setToasts((prev) => prev.filter((toast) => toast.id !== id));
  };

  return (
    <ToastContext.Provider value={{ toasts, toast, dismiss }}>
      {children}
    </ToastContext.Provider>
  );
}

export function useToast() {
  const context = useContext(ToastContext);
  if (!context) {
    throw new Error('useToast must be used within a ToastProvider');
  }
  return context;
}

export function Toaster() {
  const { toasts, dismiss } = useToast();

  return (
    <div className="fixed bottom-0 right-0 p-4 max-w-sm w-full flex flex-col gap-2 z-50">
      {toasts.map((toast) => (
        <div
          key={toast.id}
          className={cn(
            'bg-white border border-gray-200 rounded-lg p-4 shadow-lg flex gap-3 items-start',
            'animate-in fade-in slide-in-from-bottom-5',
            {
              'border-red-200 bg-red-50': toast.variant === 'destructive',
              'border-green-200 bg-green-50': toast.variant === 'success',
            }
          )}
        >
          <div className="flex-1">
            {toast.title && (
              <div className={cn(
                'font-semibold', 
                {
                  'text-red-700': toast.variant === 'destructive',
                  'text-green-700': toast.variant === 'success',
                }
              )}>
                {toast.title}
              </div>
            )}
            {toast.description && (
              <div className="text-sm mt-1 text-gray-600">
                {toast.description}
              </div>
            )}
          </div>
          {toast.action}
          <button
            onClick={() => dismiss(toast.id)}
            className="text-gray-400 hover:text-gray-500"
          >
            <X size={18} />
          </button>
        </div>
      ))}
    </div>
  );
}



--------------------------------
Next file #30
--------------------------------
Switch Plan Page
--------------------------------
// app/account/switch-plan/page.tsx
'use client';

import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { useToast } from '@/components/ui/use-toast';
import { useSubscriptionStore } from '@/store/subscription-store';
import { formatCurrency } from '@/lib/utils';

type Plan = {
  id: '1-course' | '2-course' | '3-course';
  title: string;
  price: number;
  description: string;
  features: string[];
};

export default function SwitchPlanPage() {
  const router = useRouter();
  const { toast } = useToast();
  const { currentPlan, monthlyPrice, nextBillingDate, changePlan } = useSubscriptionStore();
  
  const [selectedPlan, setSelectedPlan] = useState<string | null>(null);
  const [password, setPassword] = useState('');
  const [showPaymentFields, setShowPaymentFields] = useState(false);
  const [isProcessing, setIsProcessing] = useState(false);
  
  // Payment fields
  const [cardNumber, setCardNumber] = useState('');
  const [expiryDate, setExpiryDate] = useState('');
  const [cvv, setCvv] = useState('');
  const [zipCode, setZipCode] = useState('');
  
  // Immediate payment amount (for upgrades)
  const [immediatePayment, setImmediatePayment] = useState(0);
  
  const plans: Plan[] = [
    {
      id: '1-course',
      title: '1 Course Plan',
      price: 50,
      description: 'For your single toughest course.',
      features: [
        'Access to 1 course',
        'Full study materials',
        'Weekly updates'
      ]
    },
    {
      id: '2-course',
      title: '2 Course Plan',
      price: 75,
      description: 'For your two toughest courses.',
      features: [
        'Access to 2 courses',
        'Full study materials',
        'Weekly updates'
      ]
    },
    {
      id: '3-course',
      title: '3 Course Plan',
      price: 100,
      description: 'For your three key courses.',
      features: [
        'Access to 3 courses',
        'Full study materials',
        'Weekly updates'
      ]
    }
  ];
  
  useEffect(() => {
    // Initialize with current plan
    setSelectedPlan(currentPlan);
  }, [currentPlan]);
  
  useEffect(() => {
    // Calculate immediate payment for upgrades
    if (selectedPlan) {
      const selectedPlanData = plans.find(p => p.id === selectedPlan);
      const currentPlanData = plans.find(p => p.id === currentPlan);
      
      if (selectedPlanData && currentPlanData) {
        if (selectedPlanData.price > currentPlanData.price) {
          // Upgrade - requires immediate payment
          setImmediatePayment(selectedPlanData.price - currentPlanData.price);
          setShowPaymentFields(true);
        } else {
          // Downgrade or same plan - no immediate payment
          setImmediatePayment(0);
          setShowPaymentFields(false);
        }
      }
    }
  }, [selectedPlan, currentPlan, plans]);
  
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!selectedPlan) {
      toast({
        title: 'Please select a plan',
        variant: 'destructive',
      });
      return;
    }
    
    if (!password) {
      toast({
        title: 'Password required',
        description: 'Please enter your password to confirm this change.',
        variant: 'destructive',
      });
      return;
    }
    
    // If it's an upgrade, check payment fields
    if (showPaymentFields) {
      if (!cardNumber || !expiryDate || !cvv || !zipCode) {
        toast({
          title: 'Payment information required',
          description: 'Please complete all payment fields to process your upgrade.',
          variant: 'destructive',
        });
        return;
      }
    }
    
    setIsProcessing(true);
    
    try {
      // In a real app, call an API to change the plan
      await changePlan(selectedPlan as '1-course' | '2-course' | '3-course');
      
      toast({
        title: '



// app/account/switch-plan/page.tsx (continued)
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!selectedPlan) {
      toast({
        title: 'Please select a plan',
        variant: 'destructive',
      });
      return;
    }
    
    if (!password) {
      toast({
        title: 'Password required',
        description: 'Please enter your password to confirm this change.',
        variant: 'destructive',
      });
      return;
    }
    
    // If it's an upgrade, check payment fields
    if (showPaymentFields) {
      if (!cardNumber || !expiryDate || !cvv || !zipCode) {
        toast({
          title: 'Payment information required',
          description: 'Please complete all payment fields to process your upgrade.',
          variant: 'destructive',
        });
        return;
      }
    }
    
    setIsProcessing(true);
    
    try {
      // In a real app, call an API to change the plan
      await changePlan(selectedPlan as '1-course' | '2-course' | '3-course');
      
      toast({
        title: 'Plan Updated',
        description: `Your subscription has been updated to the ${plans.find(p => p.id === selectedPlan)?.title}. ${
          immediatePayment > 0 
            ? `You have been charged ${formatCurrency(immediatePayment)} for the upgrade.` 
            : `The change will take effect on ${nextBillingDate}.`
        }`,
        variant: 'success',
      });
      
      // Redirect back to subscription page
      router.push('/account/subscription');
    } catch (error) {
      toast({
        title: 'Update Failed',
        description: 'There was an error updating your plan. Please try again.',
        variant: 'destructive',
      });
    } finally {
      setIsProcessing(false);
    }
  };
  
  return (
    <div className="container mx-auto p-6 max-w-4xl">
      <h1 className="text-2xl font-bold mb-6">Switch Membership Plan</h1>
      <p className="text-gray-600 mb-8">
        Select the plan that best meets your academic needs. Your new plan will take effect at the start of your next billing cycle.
      </p>
      
      <Card className="mb-6">
        <CardHeader>
          <CardTitle>Your Current Plan</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="bg-primary-50 p-5 rounded-lg flex items-start gap-4">
            <div className="p-3 bg-white rounded-full text-2xl text-primary-500">
              📚
            </div>
            <div className="flex-1">
              <h3 className="font-semibold text-lg">
                {plans.find(p => p.id === currentPlan)?.title || 'Unknown Plan'}
              </h3>
              <p className="text-lg font-bold mt-1">
                {formatCurrency(monthlyPrice)}<span className="text-sm font-normal text-gray-500">/month</span>
              </p>
              
              <ul className="mt-4 space-y-2">
                {plans.find(p => p.id === currentPlan)?.features.map((feature, index) => (
                  <li key={index} className="flex items-start">
                    <span className="text-primary-500 mr-2">✓</span>
                    <span>{feature}</span>
                  </li>
                ))}
              </ul>
              
              <div className="mt-4 text-sm text-gray-500">
                Next billing date: {nextBillingDate}
              </div>
            </div>
          </div>
        </CardContent>
      </Card>
      
      <Card>
        <CardHeader>
          <CardTitle>Available Plans</CardTitle>
        </CardHeader>
        <CardContent>
          <form onSubmit={handleSubmit} className="space-y-8">
            <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
              {plans.map((plan) => (
                <div
                  key={plan.id}
                  className={`border rounded-lg overflow-hidden transition-all cursor-pointer ${
                    plan.id === currentPlan ? 'border-primary-300 bg-primary-50' : 'border-gray-200'
                  } ${
                    selectedPlan === plan.id ? 'ring-2 ring-primary-500' : ''
                  }`}
                  onClick={() => setSelectedPlan(plan.id)}
                >
                  <div className="p-5 border-b border-gray-200 relative">
                    {plan.id === currentPlan && (
                      <span className="absolute top-4 right-4 bg-primary-500 text-white text-xs font-semibold py-1 px-3 rounded-full">
                        Current
                      </span>
                    )}
                    <h3 className="text-sm font-semibold text-primary-500 mb-2">{plan.title}</h3>
                    <div className="flex items-baseline mb-2">
                      <span className="text-4xl font-bold">{formatCurrency(plan.price)}</span>
                      <span className="text-gray-500 ml-1">/month</span>
                    </div>
                    <p className="text-gray-600">{plan.description}</p>
                  </div>
                  
                  <div className="p-5">
                    <ul className="space-y-3 mb-4">
                      {plan.features.map((feature, index) => (
                        <li key={index} className="flex items-start">
                          <span className="text-primary-500 mr-2">✓</span>
                          <span className="text-sm text-gray-600">{feature}</span>
                        </li>
                      ))}
                    </ul>
                    
                    <div className="flex items-center justify-center">
                      <input
                        type="radio"
                        id={`plan-${plan.id}`}
                        name="selected-plan"
                        checked={selectedPlan === plan.id}
                        onChange={() => setSelectedPlan(plan.id)}
                        className="mr-2 h-4 w-4 text-primary-500 focus:ring-primary-500"
                      />
                      <label htmlFor={`plan-${plan.id}`} className="text-gray-700">
                        Select Plan
                      </label>
                    </div>
                  </div>
                </div>
              ))}
            </div>
            
            <div className="border-t border-gray-200 pt-8">
              <h3 className="text-lg font-semibold mb-4">Confirm Your Selection</h3>
              
              <div className="bg-gray-50 p-5 rounded-lg mb-6">
                <h4 className="font-semibold mb-3">Change Summary</h4>
                <div className="flex justify-between py-2 border-b border-gray-200">
                  <div>Current Plan:</div>
                  <div>{plans.find(p => p.id === currentPlan)?.title} ({formatCurrency(monthlyPrice)}/month)</div>
                </div>
                <div className="flex justify-between py-2 border-b border-gray-200">
                  <div>New Plan:</div>
                  <div>
                    {selectedPlan 
                      ? `${plans.find(p => p.id === selectedPlan)?.title} (${formatCurrency(plans.find(p => p.id === selectedPlan)?.price || 0)}/month)`
                      : 'No plan selected'
                    }
                  </div>
                </div>
                <div className="flex justify-between py-2 border-b border-gray-200">
                  <div>Change Effective Date:</div>
                  <div>{nextBillingDate}</div>
                </div>
                <div className="flex justify-between py-2 font-semibold">
                  <div>New Monthly Rate:</div>
                  <div>
                    {selectedPlan 
                      ? formatCurrency(plans.find(p => p.id === selectedPlan)?.price || 0)
                      : formatCurrency(monthlyPrice)
                    }
                  </div>
                </div>
                
                {immediatePayment > 0 && (
                  <div className="flex justify-between py-2 mt-2 font-semibold text-primary-700 bg-primary-50 p-2 rounded">
                    <div>Immediate Payment Due:</div>
                    <div>{formatCurrency(immediatePayment)}</div>
                  </div>
                )}
              </div>
              
              {selectedPlan && selectedPlan !== currentPlan && selectedPlan < currentPlan && (
                <div className="bg-amber-50 border-l-4 border-amber-400 p-4 mb-6">
                  <strong>Important:</strong> If you switch to a plan with fewer courses than you currently have access to, you'll need to remove courses from your account. You'll be prompted to select which courses to keep after confirming this change.
                </div>
              )}
              
              <div className="bg-gray-50 p-5 rounded-lg mb-6">
                <h4 className="font-semibold mb-3">Password Verification</h4>
                <p className="text-sm text-gray-600 mb-3">For security, please verify your password to confirm this change.</p>
                <div>
                  <label htmlFor="password" className="block text-sm text-gray-600 mb-1">Your Password</label>
                  <Input
                    type="password"
                    id="password"
                    value={password}
                    onChange={(e) => setPassword(e.target.value)}
                    required
                  />
                </div>
              </div>
              
              {showPaymentFields && (
                <div className="bg-gray-50 p-5 rounded-lg mb-6">
                  <h4 className="font-semibold mb-3">Payment Method Verification</h4>
                  <p className="text-sm text-gray-600 mb-3">For plan upgrades, please confirm your payment details.</p>
                  
                  <div className="flex gap-2 mb-3">
                    <span className="py-1 px-2 text-xs bg-gray-200 rounded">Visa</span>
                    <span className="py-1 px-2 text-xs bg-gray-200 rounded">MC</span>
                    <span className="py-1 px-2 text-xs bg-gray-200 rounded">Amex</span>
                    <span className="py-1 px-2 text-xs bg-gray-200 rounded">Disc</span>
                  </div>
                  
                  <div className="mb-3">
                    <label htmlFor="card-number" className="block text-sm text-gray-600 mb-1">Card Number</label>
                    <Input
                      id="card-number"
                      placeholder="•••• •••• •••• 4587"
                      value={cardNumber}
                      onChange={(e) => setCardNumber(e.target.value)}
                      required={showPaymentFields}
                    />
                  </div>
                  
                  <div className="grid grid-cols-2 gap-4 mb-3">
                    <div>
                      <label htmlFor="expiry" className="block text-sm text-gray-600 mb-1">Expiration Date</label>
                      <Input
                        id="expiry"
                        placeholder="MM/YY"
                        value={expiryDate}
                        onChange={(e) => setExpiryDate(e.target.value)}
                        required={showPaymentFields}
                      />
                    </div>
                    <div>
                      <label htmlFor="cvv" className="block text-sm text-gray-600 mb-1">CVV</label>
                      <Input
                        id="cvv"
                        placeholder="123"
                        value={cvv}
                        onChange={(e) => setCvv(e.target.value)}
                        required={showPaymentFields}
                      />
                    </div>
                  </div>
                  
                  <div>
                    <label htmlFor="zip" className="block text-sm text-gray-600 mb-1">Billing Zip Code</label>
                    <Input
                      id="zip"
                      placeholder="32611"
                      value={zipCode}
                      onChange={(e) => setZipCode(e.target.value)}
                      required={showPaymentFields}
                    />
                  </div>
                </div>
              )}
              
              <div className="flex gap-4">
                <Button
                  type="button"
                  variant="outline"
                  onClick={() => router.back()}
                >
                  Cancel
                </Button>
                <Button
                  type="submit"
                  disabled={!selectedPlan || selectedPlan === currentPlan || isProcessing}
                >
                  {isProcessing ? 'Processing...' : 'Confirm Plan Change'}
                </Button>
              </div>
            </div>
          </form>
        </CardContent>
      </Card>
    </div>
  );
}

--------------------------------
Next file #31
--------------------------------
Cancel Membership Page
--------------------------------
// app/account/cancel-membership/page.tsx
'use client';

import { useState } from 'react';
import { useRouter } from 'next/navigation';
import Link from 'next/link';
import { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { useToast } from '@/components/ui/use-toast';
import { useSubscriptionStore } from '@/store/subscription-store';
import { formatCurrency } from '@/lib/utils';

export default function CancelMembershipPage() {
  const router = useRouter();
  const { toast } = useToast();
  const { currentPlan, monthlyPrice, currentPeriod, cancelSubscription } = useSubscriptionStore();
  
  const [password, setPassword] = useState('');
  const [isProcessing, setIsProcessing] = useState(false);
  const [reason, setReason] = useState('');
  
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!password) {
      toast({
        title: 'Password required',
        description: 'Please enter your password to confirm cancellation.',
        variant: 'destructive',
      });
      return;
    }
    
    // Show confirmation dialog
    if (!window.confirm(
      'Are you sure you want to cancel your membership? You will continue to have access until the end of your current billing period.'
    )) {
      return;
    }
    
    setIsProcessing(true);
    
    try {
      // In a real app, call an API to cancel subscription
      await cancelSubscription();
      
      toast({
        title: 'Membership Cancelled',
        description: `Your membership has been cancelled. You will continue to have access until ${currentPeriod.end}.`,
        variant: 'success',
      });
      
      // Redirect to subscription page or dashboard
      router.push('/dashboard');
    } catch (error) {
      toast({
        title: 'Cancellation Failed',
        description: 'There was an error cancelling your membership. Please try again.',
        variant: 'destructive',
      });
    } finally {
      setIsProcessing(false);
    }
  };
  
  return (
    <div className="container mx-auto p-6 max-w-3xl">
      <h1 className="text-2xl font-bold mb-6">Cancel Membership</h1>
      
      <Card className="mb-6">
        <CardContent className="pt-6">
          <div className="bg-amber-50 border-l-4 border-amber-500 p-4 mb-6">
            <h3 className="font-semibold text-amber-800 mb-2">Please Read Before Proceeding</h3>
            <p>We're sorry to see you go! By canceling your membership, you'll lose access to all study materials at the end of your current billing period. This action cannot be undone.</p>
          </div>
          
          <div className="bg-gray-50 p-5 rounded-lg mb-6">
            <h3 className="font-semibold mb-3">Current Subscription Details</h3>
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div className="flex justify-between py-2 border-b border-gray-200">
                <div className="text-gray-600">Membership Plan:</div>
                <div className="font-medium">
                  {currentPlan === '1-course' 
                    ? '1 Course Plan' 
                    : currentPlan === '2-course' 
                      ? '2 Course Plan' 
                      : '3 Course Plan'
                  }
                </div>
              </div>
              
              <div className="flex justify-between py-2 border-b border-gray-200">
                <div className="text-gray-600">Monthly Fee:</div>
                <div className="font-medium">{formatCurrency(monthlyPrice)}</div>
              </div>
              
              <div className="flex justify-between py-2 border-b border-gray-200">
                <div className="text-gray-600">Current Period:</div>
                <div className="font-medium">{currentPeriod.start} - {currentPeriod.end}</div>
              </div>
              
              <div className="flex justify-between py-2 border-b border-gray-200">
                <div className="text-gray-600">Access Ends On:</div>
                <div className="font-medium">{currentPeriod.end}</div>
              </div>
            </div>
          </div>
          
          <div className="mb-6">
            <h3 className="font-semibold mb-3">What Happens When You Cancel</h3>
            <ul className="space-y-2">
              <li className="flex items-start">
                <span className="text-amber-500 mr-2">•</span>
                <span>Your membership will be cancelled but you will retain access to the study guide materials until the end of your current billing period.</span>
              </li>
              <li className="flex items-start">
                <span className="text-amber-500 mr-2">•</span>
                <span>You will not be charged again after cancellation.</span>
              </li>
            </ul>
          </div>
          
          <form onSubmit={handleSubmit}>
            <div className="mb-6">
              <h3 className="font-semibold mb-3">Please tell us why you're leaving</h3>
              <textarea
                className="w-full p-3 border border-gray-300 rounded-md"
                rows={4}
                placeholder="Your feedback helps us improve our service..."
                value={reason}
                onChange={(e) => setReason(e.target.value)}
              />
            </div>
            
            <div className="bg-gray-50 p-5 rounded-lg mb-6">
              <h3 className="font-semibold mb-3">Please verify your password to continue</h3>
              <div>
                <label htmlFor="password" className="block text-sm text-gray-600 mb-1">Password</label>
                <Input
                  type="password"
                  id="password"
                  value={password}
                  onChange={(e) => setPassword(e.target.value)}
                  required
                />
              </div>
            </div>
            
            <div className="border-t border-gray-200 pt-6 mb-6">
              <h3 className="font-semibold mb-3">Alternative Options</h3>
              <ul className="space-y-3">
                <li>
                  <Link href="/account/switch-plan" className="text-primary-500 hover:underline font-medium">
                    Switch to a more affordable plan
                  </Link> - Downgrade to a 1 Course Plan for only $50/month.
                </li>
                <li>
                  <Link href="/account/pause-membership" className="text-primary-500 hover:underline font-medium">
                    Pause your membership
                  </Link> - Take a break and resume when you're ready.
                </li>
                <li>
                  <Link href="/contact" className="text-primary-500 hover:underline font-medium">
                    Contact support
                  </Link> - We're here to help if you're having issues.
                </li>
              </ul>
            </div>
            
            <div className="flex gap-4">
              <Button
                type="button"
                variant="outline"
                onClick={() => router.back()}
              >
                Go Back
              </Button>
              <Button
                type="submit"
                variant="destructive"
                disabled={isProcessing}
                className="bg-red-500 hover:bg-red-600"
              >
                {isProcessing ? 'Processing...' : 'Cancel My Membership'}
              </Button>
            </div>
          </form>
        </CardContent>
      </Card>
    </div>
  );
}




--------------------------------
Next file #32
--------------------------------
Forgot Password Page
--------------------------------

// app/auth/forgot-password/page.tsx
'use client';

import { useState } from 'react';
import Link from 'next/link';
import { useRouter } from 'next/navigation';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { isValidUFLEmail } from '@/lib/utils';

export default function ForgotPasswordPage() {
  const router = useRouter();
  const [email, setEmail] = useState('');
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [error, setError] = useState('');
  const [showSuccess, setShowSuccess] = useState(false);
  
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setError('');
    
    // Validation
    if (!email) {
      setError('Please enter your email address');
      return;
    }
    
    if (!isValidUFLEmail(email)) {
      setError('Please enter a valid UFL email address');
      return;
    }
    
    setIsSubmitting(true);
    
    try {
      // In a real app, call API to send password reset email
      await new Promise(resolve => setTimeout(resolve, 1000)); // Simulate API call
      
      // Show success message
      setShowSuccess(true);
    } catch (error) {
      setError('Failed to send password reset instructions. Please try again.');
    } finally {
      setIsSubmitting(false);
    }
  };
  
  return (
    <div className="flex min-h-screen flex-col items-center justify-center py-12 px-4 sm:px-6 lg:px-8">
      <div className="w-full max-w-md">
        <div className="text-center mb-8">
          <Link href="/" className="inline-block">
            <h1 className="font-serif text-4xl italic text-primary-500">
              Smokin&apos;Notes
            </h1>
          </Link>
        </div>
        
        <div className="bg-white shadow-md rounded-lg p-8">
          <h2 className="text-center text-2xl font-bold mb-4">
            Forgot Password?
          </h2>
          
          <p className="text-center text-gray-600 mb-6">
            Your password reset instructions will be sent to your UFL email address given at the time of registration.
          </p>
          
          {showSuccess ? (
            <div className="bg-green-50 p-4 rounded-md text-green-700 mb-4">
              <div className="flex">
                <svg className="h-5 w-5 text-green-500 mr-2" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                  <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clipRule="evenodd" />
                </svg>
                <p>Password reset instructions have been sent to your email. Please check your inbox and follow the instructions.</p>
              </div>
              
              <div className="mt-4 text-center">
                <Link 
                  href="/auth/login" 
                  className="text-primary-500 hover:text-primary-600 font-medium"
                >
                  Return to login
                </Link>
              </div>
            </div>
          ) : (
            <form onSubmit={handleSubmit} className="space-y-6">
              {error && (
                <div className="bg-red-50 border-l-4 border-red-500 p-4 text-sm text-red-700">
                  {error}
                </div>
              )}
              
              <div>
                <Input
                  id="email"
                  type="email"
                  placeholder="User name (e.g. username@ufl.edu)"
                  value={email}
                  onChange={(e) => setEmail(e.target.value)}
                  required
                  className="w-full"
                />
              </div>
              
              <div>
                <Button
                  type="submit"
                  className="w-full"
                  disabled={isSubmitting}
                >
                  {isSubmitting ? 'Sending...' : 'Get Password'}
                </Button>
              </div>
              
              <div className="text-center text-sm">
                <Link 
                  href="/auth/login" 
                  className="text-primary-500 hover:text-primary-600 font-medium"
                >
                  Return to login
                </Link>
              </div>
            </form>
          )}
          
          <div className="mt-6 text-center text-sm">
            Don&apos;t have an account?{' '}
            <Link 
              href="/auth/sign-up" 
              className="text-primary-500 hover:text-primary-600 font-medium"
            >
              Sign up
            </Link>
          </div>
        </div>
      </div>
    </div>
  );
}


--------------------------------
Next file #33
--------------------------------
package.json for Dependencies
--------------------------------
{
  "name": "smokin-notes-next",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@radix-ui/react-tabs": "^1.0.4",
    "clsx": "^2.0.0",
    "lucide-react": "^0.268.0",
    "next": "^13.4.10",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "recharts": "^2.7.2",
    "tailwind-merge": "^1.14.0",
    "zustand": "^4.3.9"
  },
  "devDependencies": {
    "@types/node": "^20.4.2",
    "@types/react": "^18.2.15",
    "@types/react-dom": "^18.2.7",
    "autoprefixer": "^10.4.14",
    "eslint": "^8.45.0",
    "eslint-config-next": "^13.4.10",
    "postcss": "^8.4.26",
    "tailwindcss": "^3.3.3",
    "typescript": "^5.1.6"
  }
}




--------------------------------
Next file #35
--------------------------------
Project Directory Structure Summary
--------------------------------
smokin-notes-next/
├── app/
│   ├── layout.tsx                   # Root layout
│   ├── page.tsx                     # Homepage
│   ├── (dashboard)/                 # Dashboard layout group
│   │   ├── layout.tsx               # Dashboard layout
│   │   ├── dashboard/
│   │   │   └── page.tsx             # Dashboard home
│   │   └── courses/
│   │       └── page.tsx             # Courses page
│   ├── auth/                        # Auth routes
│   │   ├── layout.tsx               # Auth layout 
│   │   ├── login/
│   │   │   └── page.tsx             # Login page
│   │   ├── sign-up/
│   │   │   └── page.tsx             # Sign up page
│   │   ├── forgot-password/
│   │   │   └── page.tsx             # Forgot password page
│   │   └── verify-email/
│   │       └── page.tsx             # Email verification page
│   ├── account/                     # Account pages
│   │   ├── page.tsx                 # Account main page
│   │   ├── billing/
│   │   │   └── page.tsx             # Billing history
│   │   ├── subscription/
│   │   │   └── page.tsx             # Subscription management
│   │   ├── switch-plan/
│   │   │   └── page.tsx             # Plan switching 
│   │   ├── cancel-membership/
│   │   │   └── page.tsx             # Membership cancellation
│   │   ├── pause-membership/
│   │   │   └── page.tsx             # Pause membership 
│   │   ├── courses/
│   │   │   └── page.tsx             # Course management
│   │   └── password/
│   │       └── page.tsx             # Change password
│   └── membership/                  # Membership pages
│       ├── plans/
│       │   └── page.tsx             # Plan selection
│       ├── payment/
│       │   └── page.tsx             # Payment processing
│       └── course-selection/
│           └── page.tsx             # Course selection
├── components/
│   ├── ui/                          # UI components
│   │   ├── button.tsx               # Button component
│   │   ├── card.tsx                 # Card component
│   │   ├── input.tsx                # Input component
│   │   ├── select.tsx               # Select component
│   │   ├── tabs.tsx                 # Tabs component
│   │   └── toast.tsx                # Toast component
│   ├── auth/                        # Auth components
│   │   ├── login-form.tsx           # Login form
│   │   └── signup-form.tsx          # Signup form
│   ├── account/                     # Account components
│   │   ├── profile-tab.tsx          # Profile tab
│   │   ├── billing-tab.tsx          # Billing tab
│   │   ├── subscription-tab.tsx     # Subscription tab
│   │   └── password-tab.tsx         # Password tab
│   ├── courses/                     # Course components
│   │


smokin-notes-next/
├── app/...
├── components/...
│   ├── courses/                     # Course components
│   │   ├── course-grid.tsx          # Course grid display
│   │   ├── course-card.tsx          # Individual course card
│   │   └── course-selection.tsx     # Course selection component
│   ├── membership/                  # Membership components
│   │   ├── plan-cards.tsx           # Plan selection cards
│   │   ├── payment-form.tsx         # Payment processing form
│   │   └── plan-features.tsx        # Plan features list
│   └── layout/                      # Layout components
│       ├── header.tsx               # Header with navigation
│       ├── footer.tsx               # Site footer
│       └── sidebar.tsx              # Account sidebar navigation
├── lib/
│   ├── utils.ts                     # Utility functions
│   └── auth.ts                      # Authentication helpers
├── store/
│   ├── auth-store.ts                # Authentication state
│   ├── user-store.ts                # User profile state
│   ├── course-store.ts              # Course selection state
│   └── subscription-store.ts        # Subscription management state
├── styles/
│   └── globals.css                  # Global styles and Tailwind imports
├── public/
│   └── images/
│       └── logo.png                 # Site logo
├── middleware.ts                    # Authentication middleware
├── tailwind.config.js               # Tailwind configuration
├── next.config.js                   # Next.js configuration
├── tsconfig.json                    # TypeScript configuration
└── package.json                     # Dependencies and scripts


--------------------------------
Next file #36
--------------------------------
Utility Functions
--------------------------------





Conclusion
This comprehensive implementation demonstrates how to transform the original collection of HTML files into a modern Next.js application with:

Component-Based Architecture: Breaking down the UI into reusable components for better maintainability and code organization.
Global State Management: Using Zustand for managing authentication, user profiles, course selection, and subscription data across the application.
Responsive Design: Implementing a responsive layout that works well on all device sizes using Tailwind CSS.
Form Handling: Creating robust forms for user input with validation and error handling.
Navigation: Implementing client-side navigation with Next.js's App Router and middleware for protected routes.
UI Components: Building a library of reusable UI components like buttons, cards, inputs, and modals for consistent design.
User Experience: Adding toast notifications, loading states, and appropriate feedback for a polished user experience.

The structure follows modern web development best practices:

Separation of Concerns: UI components, business logic, and state management are clearly separated.
Progressive Enhancement: The app works without JavaScript but enhances the experience when it's available.
Accessibility: Components include proper ARIA attributes and follow accessibility best practices.
Performance: Using Next.js's built-in optimizations like server components and image optimization.

This implementation would provide a solid foundation for further development and scaling of the Smokin'Notes platform, allowing for easy addition of new features and integration with backend services.




--------------------------------
Next file #37 
--------------------------------
File Repair: 
Account Profile Tab 
// components/account/profile-tab.tsx (complete version)
--------------------------------
// components/account/profile-tab.tsx (complete version)
'use client';

import { useEffect, useState } from 'react';
import { useRouter } from 'next/navigation';
import { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { useToast } from '@/components/ui/use-toast';
import { useUserStore } from '@/store/user-store';

export default function ProfileTab() {
  const router = useRouter();
  const { toast } = useToast();
  const { profile, isLoading, fetchProfile, updateProfile } = useUserStore();
  
  const [formData, setFormData] = useState({
    firstName: '',
    lastName: '',
    contactEmail: '',
    phone: '',
    major: '',
    status: '',
  });
  
  const [isEditing, setIsEditing] = useState(false);
  
  useEffect(() => {
    fetchProfile();
  }, [fetchProfile]);
  
  useEffect(() => {
    if (profile) {
      setFormData({
        firstName: profile.firstName,
        lastName: profile.lastName,
        contactEmail: profile.contactEmail,
        phone: profile.phone,
        major: profile.major,
        status: profile.status,
      });
    }
  }, [profile]);
  
  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
  };
  
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    try {
      await updateProfile(formData);
      setIsEditing(false);
      
      toast({
        title: 'Profile Updated',
        description: 'Your profile information has been successfully updated.',
        variant: 'success',
      });
    } catch (error) {
      toast({
        title: 'Update Failed',
        description: 'There was an error updating your profile. Please try again.',
        variant: 'destructive',
      });
    }
  };
  
  if (isLoading) {
    return <div className="flex justify-center py-10">Loading profile data...</div>;
  }
  
  if (!profile) {
    return (
      <div className="flex flex-col items-center py-10">
        <p className="mb-4">Could not load profile data.</p>
        <Button onClick={() => fetchProfile()}>Retry</Button>
      </div>
    );
  }
  
  return (
    <div>
      <Card className="mb-6">
        <CardHeader>
          <CardTitle>Personal Information</CardTitle>
        </CardHeader>
        <CardContent>
          {isEditing ? (
            <form onSubmit={handleSubmit} className="space-y-4">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    First Name
                  </label>
                  <Input
                    name="firstName"
                    value={formData.firstName}
                    onChange={handleInputChange}
                    required
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Last Name
                  </label>
                  <Input
                    name="lastName"
                    value={formData.lastName}
                    onChange={handleInputChange}
                    required
                  />
                </div>
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  UFL Email Address
                </label>
                <Input
                  value={profile.email}
                  disabled
                  className="bg-gray-100"
                />
                <p className="text-xs text-gray-500 mt-1">Cannot be changed</p>
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Contact Email
                </label>
                <Input
                  name="contactEmail"
                  type="email"
                  value={formData.contactEmail}
                  onChange={handleInputChange}
                />
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Phone Number
                </label>
                <Input
                  name="phone"
                  type="tel"
                  value={formData.phone}
                  onChange={handleInputChange}
                />
              </div>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Major
                  </label>
                  <select
                    name="major"
                    value={formData.major}
                    onChange={handleInputChange}
                    className="w-full border border-gray-300 rounded-md p-2"
                  >
                    <option value="">Select a major</option>
                    <option value="Accounting">Accounting</option>
                    <option value="Agricultural and Life Sciences">Agricultural and Life Sciences</option>
                    <option value="Arts">Arts</option>
                    <option value="Biology">Biology</option>
                    <option value="Business Administration">Business Administration</option>
                    <option value="Chemistry">Chemistry</option>
                    <option value="Computer and Information Sciences">Computer and Information Sciences</option>
                    <option value="Communications & Media">Communications & Media</option>
                    <option value="Economics">Economics</option>
                    <option value="Education">Education</option>
                    <option value="Engineering">Engineering</option>
                    <option value="Environmental Science/Sustainability">Environmental Science/Sustainability</option>
                    <option value="Finance">Finance</option>
                    <option value="Health Sciences">Health Sciences</option>
                    <option value="Humanities & Social Sciences">Humanities & Social Sciences</option>
                    <option value="Marketing">Marketing</option>
                    <option value="Management">Management</option>
                    <option value="Mathematics">Mathematics</option>
                    <option value="Medicine">Medicine</option>
                    <option value="Nursing">Nursing</option>
                    <option value="Psychology">Psychology</option>
                    <option value="Public Health">Public Health</option>
                    <option value="Undecided">Undecided</option>
                    <option value="Other">Other</option>
                  </select>
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Status
                  </label>
                  <select
                    name="status"
                    value={formData.status}
                    onChange={handleInputChange}
                    className="w-full border border-gray-300 rounded-md p-2"
                  >
                    <option value="">Select your status</option>
                    <option value="c/o '28">c/o '28</option>
                    <option value="c/o '27">c/o '27</option>
                    <option value="c/o '26">c/o '26</option>
                    <option value="c/o '25">c/o '25</option>
                    <option value="Already Graduated">Already Graduated</option>
                  </select>
                </div>
              </div>
              
              <div className="flex gap-3 pt-4">
                <Button type="submit">Save Changes</Button>
                <Button 
                  type="button" 
                  variant="outline" 
                  onClick={() => setIsEditing(false)}
                >
                  Cancel
                </Button>
              </div>
            </form>
          ) : (
            <div className="space-y-4">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <InfoRow label="Name" value={`${profile.firstName} ${profile.lastName}`} />
                <InfoRow label="UFL Email" value={profile.email} />
              </div>
              
              <InfoRow label="Contact Email" value={profile.contactEmail || '-'} />
              <InfoRow label="Phone" value={profile.phone || '-'} />
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <InfoRow label="Major" value={profile.major || '-'} />
                <InfoRow label="Status" value={profile.status || '-'} />
              </div>
              
              <div className="pt-4">
                <Button onClick={() => setIsEditing(true)}>Edit Profile</Button>
              </div>
            </div>
          )}
        </CardContent>
      </Card>
      
      <Card>
        <CardHeader>
          <CardTitle>Account Information</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            <InfoRow label="Member Since" value="January 15, 2025" />
            <InfoRow label="Account Type" value="Student" />
            
            <div className="pt-4">
              <Button 
                variant="outline" 
                className="text-red-500 border-red-300 hover:bg-red-50"
                onClick={() => router.push('/account/delete')}
              >
                Delete Account
              </Button>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}

function InfoRow({ label, value }: { label: string; value: string }) {
  return (
    <div className="flex border-b border-gray-100 py-2">
      <div className="w-36 text-gray-500">{label}</div>
      <div className="flex-1 font-medium">{value}</div>
    </div>
  );
}



--------------------------------
Next file #38 
--------------------------------
File Repair: 
complete Tabs component implementation:
// components/ui/tabs.tsx
--------------------------------
// components/ui/tabs.tsx
'use client';

import * as React from 'react';
import { cn } from '@/lib/utils';

const TabsContext = React.createContext<{
  value: string;
  onValueChange: (value: string) => void;
} | null>(null);

function useTabs() {
  const context = React.useContext(TabsContext);
  if (!context) {
    throw new Error('useTabs must be used within a TabsProvider');
  }
  return context;
}

interface TabsProps {
  value: string;
  onValueChange: (value: string) => void;
  children: React.ReactNode;
  className?: string;
}

export function Tabs({ value, onValueChange, children, className }: TabsProps) {
  return (
    <TabsContext.Provider value={{ value, onValueChange }}>
      <div className={cn('w-full', className)}>
        {children}
      </div>
    </TabsContext.Provider>
  );
}

interface TabsListProps extends React.HTMLAttributes<HTMLDivElement> {
  children: React.ReactNode;
}

export function TabsList({ children, className, ...props }: TabsListProps) {
  return (
    <div
      className={cn(
        'flex flex-wrap border-b border-gray-200 gap-2',
        className
      )}
      {...props}
    >
      {children}
    </div>
  );
}

interface TabsTriggerProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {
  value: string;
  children: React.ReactNode;
}

export function TabsTrigger({ value, children, className, ...props }: TabsTriggerProps) {
  const { value: selectedValue, onValueChange } = useTabs();
  const isSelected = selectedValue === value;

  return (
    <button
      type="button"
      role="tab"
      aria-selected={isSelected}
      className={cn(
        'py-2 px-4 text-sm font-medium',
        'border-b-2 -mb-px',
        isSelected 
          ? 'border-primary-500 text-primary-500'
          : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300',
        className
      )}
      onClick={() => onValueChange(value)}
      {...props}
    >
      {children}
    </button>
  );
}

interface TabsContentProps extends React.HTMLAttributes<HTMLDivElement> {
  value: string;
  children: React.ReactNode;
}

export function TabsContent({ value, children, className, ...props }: TabsContentProps) {
  const { value: selectedValue } = useTabs();
  const isSelected = selectedValue === value;

  if (!isSelected) return null;

  return (
    <div
      role="tabpanel"
      className={cn('mt-4', className)}
      {...props}
    >
      {children}
    </div>
  );
}



--------------------------------
Next file #39 
--------------------------------
File Repair: 
complete the middleware implementation:
// middleware.ts
--------------------------------
// middleware.ts
import { NextResponse } from 'next/server';
import type { NextRequest } from 'next/server';

export function middleware(request: NextRequest) {
  const currentUser = request.cookies.get('authToken')?.value;
  
  // Protected routes that require authentication
  const protectedRoutes = [
    '/dashboard',
    '/account',
    '/membership/course-selection',
    '/courses',
  ];
  
  // Exact auth routes that should redirect to dashboard if already logged in
  const authRoutes = [
    '/auth/login',
    '/auth/sign-up',
    '/auth/forgot-password',
  ];
  
  const isProtectedRoute = protectedRoutes.some(route => 
    request.nextUrl.pathname.startsWith(route)
  );
  
  const isAuthRoute = authRoutes.some(route => 
    request.nextUrl.pathname === route
  );
  
  // If trying to access protected route without being logged in
  if (isProtectedRoute && !currentUser) {
    const url = new URL('/auth/login', request.url);
    url.searchParams.set('redirectTo', request.nextUrl.pathname);
    return NextResponse.redirect(url);
  }
  
  // If trying to access auth routes while already logged in
  if (isAuthRoute && currentUser) {
    return NextResponse.redirect(new URL('/dashboard', request.url));
  }
  
  return NextResponse.next();
}

// Match against protected routes and auth routes
export const config = {
  matcher: [
    '/dashboard/:path*',
    '/account/:path*', 
    '/membership/course-selection/:path*',
    '/courses/:path*',
    '/auth/login',
    '/auth/sign-up',
    '/auth/forgot-password',
  ],
};



--------------------------------
Next file #40 
--------------------------------
File Repair: 
complete ToastProvider implementation:
// components/ui/providers.tsx
--------------------------------
// components/ui/providers.tsx
'use client';

import { ReactNode } from 'react';
import { ToastProvider } from '@/components/ui/toast';

export function Providers({ children }: { children: ReactNode }) {
  return (
    <ToastProvider>
      {children}
    </ToastProvider>
  );
}


--------------------------------
Next file #41 
--------------------------------
File Repair: 
update the root layout to use the providers:
// app/layout.tsx
--------------------------------

// app/layout.tsx
import { Metadata } from 'next';
import { Inter } from 'next/font/google';
import { Providers } from '@/components/ui/providers';
import '@/styles/globals.css';

const inter = Inter({ subsets: ['latin'] });

export const metadata: Metadata = {
  title: 'Smokin\'Notes - UF\'s #1 Study Resource',
  description: 'Boost your grades with Smokin\'Notes - the premier study resource for University of Florida students.',
};

export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <html lang="en">
      <body className={inter.className}>
        <Providers>
          {children}
        </Providers>
      </body>
    </html>
  );
}






--------------------------------
Next file #42 
--------------------------------
File Repair: 
omplete the Payment Form component:
// components/membership/payment-form.tsx (continued)
--------------------------------

// components/membership/payment-form.tsx (continued)
'use client';

import { useState } from 'react';
import { useRouter } from 'next/navigation';
import { Card } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Button } from '@/components/ui/button';
import { useSubscriptionStore } from '@/store/subscription-store';

export default function PaymentForm() {
  const router = useRouter();
  const { currentPlan, monthlyPrice } = useSubscriptionStore();
  
  const [cardNumber, setCardNumber] = useState('');
  const [expiryDate, setExpiryDate] = useState('');
  const [cvv, setCvv] = useState('');
  const [zipCode, setZipCode] = useState('');
  const [isProcessing, setIsProcessing] = useState(false);
  
  // Terms acknowledgment
  const [cancelAcknowledge, setCancelAcknowledge] = useState(false);
  const [autoCancelAcknowledge, setAutoCancelAcknowledge] = useState(false);
  
  const canSubmit = cancelAcknowledge && autoCancelAcknowledge && 
                    cardNumber && expiryDate && cvv && zipCode;
  
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!canSubmit) return;
    
    setIsProcessing(true);
    
    try {
      // In a real app, call an API to process payment
      await new Promise(resolve => setTimeout(resolve, 1500)); // Simulate API call
      
      // Redirect to course selection
      router.push('/membership/course-selection');
    } catch (error) {
      console.error('Payment failed:', error);
      alert('Payment processing failed. Please try again.');
    } finally {
      setIsProcessing(false);
    }
  };
  
  // Format card number with spaces
  const formatCardNumber = (value: string) => {
    const v = value.replace(/\s+/g, '').replace(/[^0-9]/gi, '');
    const matches = v.match(/\d{4,16}/g);
    const match = matches && matches[0] || '';
    const parts = [];
    
    for (let i = 0, len = match.length; i < len; i += 4) {
      parts.push(match.substring(i, i + 4));
    }
    
    if (parts.length) {
      return parts.join(' ');
    } else {
      return value;
    }
  };
  
  // Format expiry date (MM/YY)
  const formatExpiryDate = (value: string) => {
    const v = value.replace(/\s+/g, '').replace(/[^0-9]/gi, '');
    
    if (v.length >= 2) {
      return `${v.substring(0, 2)}/${v.substring(2, 4)}`;
    }
    
    return v;
  };
  
  return (
    <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
      <div className="col-span-2">
        <Card className="p-6">
          <h2 className="text-xl font-semibold mb-6 pb-2 border-b">Payment Information</h2>
          
          <form onSubmit={handleSubmit}>
            <div className="mb-6">
              <h3 className="text-sm font-semibold text-gray-500 mb-4">Billing Information</h3>
              <div className="grid grid-cols-2 gap-4 mb-4">
                <div>
                  <label className="block text-sm text-gray-600 mb-1">First Name</label>
                  <Input defaultValue="Ry" required />
                </div>
                <div>
                  <label className="block text-sm text-gray-600 mb-1">Last Name</label>
                  <Input defaultValue="Di" required />
                </div>
              </div>
              
              <div className="mb-4">
                <label className="block text-sm text-gray-600 mb-1">Email Address</label>
                <Input type="email" defaultValue="ryan@ufl.edu" required />
              </div>
            </div>
            
            <div className="mb-6">
              <h3 className="text-sm font-semibold text-gray-500 mb-4">Payment Method</h3>
              
              <div className="flex gap-2 mb-2">
                <div className="py-1 px-2 text-xs bg-gray-100 rounded">Visa</div>
                <div className="py-1 px-2 text-xs bg-gray-100 rounded">MC</div>
                <div className="py-1 px-2 text-xs bg-gray-100 rounded">Amex</div>
                <div className="py-1 px-2 text-xs bg-gray-100 rounded">Disc</div>
              </div>
              
              <div className="mb-4">
                <label className="block text-sm text-gray-600 mb-1">Card Number</label>
                <Input 
                  value={cardNumber}
                  onChange={(e) => setCardNumber(formatCardNumber(e.target.value))}
                  placeholder="1234 5678 9012 3456"
                  maxLength={19}
                  required
                />
              </div>
              
              <div className="grid grid-cols-2 gap-4 mb-4">
                <div>
                  <label className="block text-sm text-gray-600 mb-1">Expiration Date</label>
                  <Input 
                    value={expiryDate}
                    onChange={(e) => setExpiryDate(formatExpiryDate(e.target.value))}
                    placeholder="MM/YY"
                    maxLength={5}
                    required
                  />
                </div>
                <div>
                  <label className="block text-sm text-gray-600 mb-1">Security Code (CVV)</label>
                  <Input 
                    value={cvv}
                    onChange={(e) => setCvv(e.target.value.replace(/\D/g, ''))}
                    placeholder="123"
                    maxLength={4}
                    required
                  />
                </div>
              </div>
              
              <div className="mb-4">
                <label className="block text-sm text-gray-600 mb-1">Billing Zip Code</label>
                <Input 
                  value={zipCode}
                  onChange={(e) => setZipCode(e.target.value.replace(/\D/g, ''))}
                  placeholder="32611"
                  maxLength={5}
                  required
                />
              </div>
            </div>
            
            <div className="bg-gray-50 p-4 rounded-md mt-6">
              <h3 className="font-semibold mb-3">Required Acknowledgments</h3>
              
              <div className="flex items-start gap-2 mb-3">
                <input
                  type="checkbox"
                  id="cancel-acknowledge"
                  checked={cancelAcknowledge}
                  onChange={() => setCancelAcknowledge(!cancelAcknowledge)}
                  className="mt-1"
                />
                <label htmlFor="cancel-acknowledge" className="text-sm">
                  I understand that I am responsible for canceling my subscription if I no longer wish to be charged.
                </label>
              </div>
              
              <div className="flex items-start gap-2">
                <input
                  type="checkbox"
                  id="auto-cancel-acknowledge"
                  checked={autoCancelAcknowledge}
                  onChange={() => setAutoCancelAcknowledge(!autoCancelAcknowledge)}
                  className="mt-1"
                />
                <label htmlFor="auto-cancel-acknowledge" className="text-sm">
                  I understand that my membership will NOT automatically cancel at the end of a course, exam, or semester.
                </label>
              </div>
              
              {!canSubmit && (
                <p className="text-primary-500 text-sm mt-3 font-medium">
                  Both acknowledgments are required to proceed with payment
                </p>
              )}
            </div>
            
            <Button
              type="submit"
              className="w-full mt-6"
              disabled={!canSubmit || isProcessing}
            >
              {isProcessing ? 'Processing...' : 'Complete Payment'}
            </Button>
            
            <div className="text-center mt-4 text-sm text-gray-500 flex items-center justify-center">
              <span className="mr-2">🔒</span>
              Secure payment processing
            </div>
          </form>
        </Card>
      </div>
      
      <div>
        <Card className="p-6">
          <h2 className="text-xl font-semibold mb-6 pb-2 border-b">Order Summary</h2>
          
          <div className="border-b pb-4 mb-4">
            <div className="flex justify-between mb-3">
              <span>{currentPlan === '1-course' ? '1' : currentPlan === '2-course' ? '2' : '3'} Course Plan</span>
              <span>${monthlyPrice.toFixed(2)}</span>
            </div>
          </div>
          
          <div className="flex justify-between font-semibold text-lg mb-6">
            <span>Total</span>
            <span>${monthlyPrice.toFixed(2)}</span>
          </div>
          
          <div className="flex mb-4">
            <Input
              placeholder="Promo Code"
              className="rounded-r-none"
            />
            <Button
              type="button"
              className="rounded-l-none"
            >
              Apply
            </Button>
          </div>
          
          <div className="bg-primary-50 p-4 text-sm text-gray-700 rounded-md">
            You will be charged ${monthlyPrice.toFixed(2)} monthly on this same day of the month until you cancel. You can cancel anytime from your account settings.
          </div>
        </Card>
      </div>
    </div>
  );
}


--------------------------------
Next file #43 
--------------------------------
Overall Project Directory Structure Summary
--------------------------------

smokin-notes-next/
├── app/
│   ├── layout.tsx                   # Root layout with providers
│   ├── page.tsx                     # Homepage
│   ├── (dashboard)/                 # Dashboard layout group
│   │   ├── layout.tsx               # Dashboard layout with header/footer
│   │   ├── dashboard/
│   │   │   └── page.tsx             # Dashboard home page
│   │   └── courses/
│   │       └── page.tsx             # Courses overview page
│   ├── auth/                        # Authentication routes
│   │   ├── layout.tsx               # Auth layout with minimal styling
│   │   ├── login/
│   │   │   └── page.tsx             # Login page
│   │   ├── sign-up/
│   │   │   └── page.tsx             # Sign up page
│   │   ├── forgot-password/
│   │   │   └── page.tsx             # Forgot password page
│   │   └── verify-email/
│   │       └── page.tsx             # Email verification page
│   ├── account/                     # Account management pages
│   │   ├── page.tsx                 # Account profile main page
│   │   ├── billing/
│   │   │   └── page.tsx             # Billing history page
│   │   ├── subscription/
│   │   │   └── page.tsx             # Subscription management page
│   │   ├── switch-plan/
│   │   │   └── page.tsx             # Plan switching page
│   │   ├── cancel-membership/
│   │   │   └── page.tsx             # Membership cancellation page
│   │   ├── pause-membership/
│   │   │   └── page.tsx             # Pause membership page
│   │   ├── courses/
│   │   │   └── page.tsx             # Course management page
│   │   └── password/
│   │       └── page.tsx             # Change password page
│   └── membership/                  # Membership pages
│       ├── plans/
│       │   └── page.tsx             # Plan selection page
│       ├── payment/
│       │   └── page.tsx             # Payment processing page
│       └── course-selection/
│           └── page.tsx             # Course selection page
├── components/
│   ├── ui/                          # Reusable UI components
│   │   ├── button.tsx               # Button component
│   │   ├── card.tsx                 # Card component
│   │   ├── input.tsx                # Input component
│   │   ├── select.tsx               # Select component
│   │   ├── tabs.tsx                 # Tabs component
│   │   ├── toast.tsx                # Toast notification component
│   │   └── providers.tsx            # App providers wrapper
│   ├── auth/                        # Authentication components
│   │   ├── login-form.tsx           # Login form component
│   │   └── signup-form.tsx          # Signup form component
│   ├── account/                     # Account components
│   │   ├── profile-tab.tsx          # Profile tab component
│   │   ├── billing-tab.tsx          # Billing tab component
│   │   ├── subscription-tab.tsx     # Subscription tab component
│   │   ├── password-tab.tsx         # Password tab component
│   │   └── sidebar.tsx              # Account sidebar navigation
│   ├── courses/                     # Course components
│   │   ├── course-grid.tsx          # Course grid display component
│   │   ├── course-card.tsx          # Individual course card component
│   │   └── course-selection.tsx     # Course selection component
│   ├── membership/                  # Membership components
│   │   ├── plan-cards.tsx           # Plan selection cards component
│   │   ├── payment-form.tsx         # Payment processing form
│   │   └── plan-features.tsx        # Plan features list component
│   └── layout/                      # Layout components
│       ├── header.tsx               # Site header with navigation
│       └── footer.tsx               # Site footer component
├── lib/
│   ├── utils.ts                     # Utility functions
│   └── auth.ts                      # Authentication helpers
├── store/
│   ├── auth-store.ts                # Authentication state store
│   ├── user-store.ts                # User profile state store
│   ├── course-store.ts              # Course selection state store
│   └── subscription-store.ts        # Subscription management state store
├── styles/
│   └── globals.css                  # Global styles and Tailwind imports
├── public/
│   └── images/
│       └── logo.png                 # Site logo
├── middleware.ts                    # Authentication protection middleware
├── tailwind.config.js               # Tailwind CSS configuration
├── next.config.js                   # Next.js configuration
├── tsconfig.json                    # TypeScript configuration
└── package.json                     # Dependencies and scripts







--------------------------------
Next file #144
--------------------------------
Phase 1: Project Setup and Core Framework
Let's begin with the essential configuration files to set up your Next.js application with Tailwind CSS.
1. Tailwind Configuration
// tailwind.config.js
--------------------------------
// tailwind.config.js
const colors = require('tailwindcss/colors');

module.exports = {
  content: [
    './app/**/*.{js,ts,jsx,tsx}',
    './components/**/*.{js,ts,jsx,tsx}',
  ],
  theme: {
    extend: {
      colors: {
        primary: {
          50: '#ffebee',
          100: '#ffcdd2',
          200: '#ef9a9a',
          300: '#e57373',
          400: '#ef5350',
          500: '#d32f2f', // Primary color from original design
          600: '#b71c1c', // Hover color from original design
          700: '#a01616',
          800: '#8c1014',
          900: '#7a0b12',
        },
        success: {
          // Green colors for success states
          50: '#e8f5e9',
          500: '#2e7d32',
        },
        warning: {
          // Orange colors for warning states
          50: '#fff8e1', 
          500: '#f57c00',
        },
      },
      fontFamily: {
        sans: ['-apple-system', 'BlinkMacSystemFont', 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu', 'Cantarell', 'sans-serif'],
        serif: ['Georgia', 'serif'],
      },
    },
  },
  plugins: [],
}



--------------------------------
Next file #145 
--------------------------------
2. Next.js Configuration
--------------------------------
/** @type {import('next').NextConfig} */
const nextConfig = {
  reactStrictMode: true,
  swcMinify: true,
  images: {
    domains: [], // Add domains here if you need to load external images
  },
  // Enable experimental features as needed
  experimental: {
    // appDir: true, // App directory is now the default in Next.js 13+
  },
}

module.exports = nextConfig



--------------------------------
Next file #146
--------------------------------
3. Global Styles with Tailwind
--------------------------------
/* styles/globals.css */
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 0 0% 3.9%;
    --card: 0 0% 100%;
    --card-foreground: 0 0% 3.9%;
    --popover: 0 0% 100%;
    --popover-foreground: 0 0% 3.9%;
    --primary: 0 73% 50%;
    --primary-foreground: 0 0% 98%;
    --secondary: 0 0% 96.1%;
    --secondary-foreground: 0 0% 9%;
    --muted: 0 0% 96.1%;
    --muted-foreground: 0 0% 45.1%;
    --accent: 0 0% 96.1%;
    --accent-foreground: 0 0% 9%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 0 0% 98%;
    --border: 0 0% 89.8%;
    --input: 0 0% 89.8%;
    --ring: 0 73% 50%;
    --radius: 0.5rem;
  }

  .dark {
    --background: 0 0% 3.9%;
    --foreground: 0 0% 98%;
    --card: 0 0% 3.9%;
    --card-foreground: 0 0% 98%;
    --popover: 0 0% 3.9%;
    --popover-foreground: 0 0% 98%;
    --primary: 0 73% 50%;
    --primary-foreground: 0 0% 98%;
    --secondary: 0 0% 14.9%;
    --secondary-foreground: 0 0% 98%;
    --muted: 0 0% 14.9%;
    --muted-foreground: 0 0% 63.9%;
    --accent: 0 0% 14.9%;
    --accent-foreground: 0 0% 98%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 0 0% 98%;
    --border: 0 0% 14.9%;
    --input: 0 0% 14.9%;
    --ring: 0 73% 50%;
  }
}

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
}



--------------------------------
Next file #147 
--------------------------------
4. Root Layout
--------------------------------
import { Metadata } from 'next';
import { Inter } from 'next/font/google';
import { Providers } from '@/components/ui/providers';
import '@/styles/globals.css';

const inter = Inter({ subsets: ['latin'] });

export const metadata: Metadata = {
  title: 'Smokin\'Notes - UF\'s #1 Study Resource',
  description: 'Boost your grades with Smokin\'Notes - the premier study resource for University of Florida students.',
};

export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <html lang="en">
      <body className={inter.className}>
        <Providers>
          {children}
        </Providers>
      </body>
    </html>
  );
}

--------------------------------
Next file #148 
--------------------------------
Providers Component for State Management
--------------------------------
'use client';

import { ReactNode } from 'react';
import { ToastProvider } from '@/components/ui/toast';

export function Providers({ children }: { children: ReactNode }) {
  return (
    <ToastProvider>
      {children}
    </ToastProvider>
  );
}




--------------------------------
Next file #149 
--------------------------------
6. Toast Component for Notifications
--------------------------------
'use client';

import { ReactNode } from 'react';
import { ToastProvider } from '@/components/ui/toast';

export function Providers({ children }: { children: ReactNode }) {
  return (
    <ToastProvider>
      {children}
    </ToastProvider>
  );
}


--------------------------------
Next file #150 
--------------------------------
7. Utility Functions
--------------------------------
'use client';

import { ReactNode } from 'react';
import { ToastProvider } from '@/components/ui/toast';

export function Providers({ children }: { children: ReactNode }) {
  return (
    <ToastProvider>
      {children}
    </ToastProvider>
  );
}


--------------------------------
Next file #151 
--------------------------------
8. Authentication Middleware
--------------------------------
import { NextResponse } from 'next/server';
import type { NextRequest } from 'next/server';

export function middleware(request: NextRequest) {
  const currentUser = request.cookies.get('authToken')?.value;
  
  // Protected routes that require authentication
  const protectedRoutes = [
    '/dashboard',
    '/account',
    '/membership/course-selection',
    '/courses',
  ];
  
  // Exact auth routes that should redirect to dashboard if already logged in
  const authRoutes = [
    '/auth/login',
    '/auth/sign-up',
    '/auth/forgot-password',
  ];
  
  const isProtectedRoute = protectedRoutes.some(route => 
    request.nextUrl.pathname.startsWith(route)
  );
  
  const isAuthRoute = authRoutes.some(route => 
    request.nextUrl.pathname === route
  );
  
  // If trying to access protected route without being logged in
  if (isProtectedRoute && !currentUser) {
    const url = new URL('/auth/login', request.url);
    url.searchParams.set('redirectTo', request.nextUrl.pathname);
    return NextResponse.redirect(url);
  }
  
  // If trying to access auth routes while already logged in
  if (isAuthRoute && currentUser) {
    return NextResponse.redirect(new URL('/dashboard', request.url));
  }
  
  return NextResponse.next();
}

// Match against protected routes and auth routes
export const config = {
  matcher: [
    '/dashboard/:path*',
    '/account/:path*', 
    '/membership/course-selection/:path*',
    '/courses/:path*',
    '/auth/login',
    '/auth/sign-up',
    '/auth/forgot-password',
  ],
};


--------------------------------
Next file #152 
--------------------------------
9. Authentication Helpers
--------------------------------
import { cookies } from 'next/headers';

// In a real application, you would integrate with your authentication provider
// such as NextAuth.js, Auth0, or a custom solution

export interface User {
  id: string;
  email: string;
  firstName: string;
  lastName: string;
  contactEmail?: string;
  phone?: string;
  major?: string;
  status?: string;
}

// Check if user is authenticated on the server
export async function getUser(): Promise<User | null> {
  const cookieStore = cookies();
  const token = cookieStore.get('authToken')?.value;
  
  if (!token) {
    return null;
  }
  
  try {
    // In a real application, you would verify the token with your auth provider
    // and fetch the user data from your API or database
    
    // Mock implementation for development
    return {
      id: '1',
      email: 'ryan@ufl.edu',
      firstName: 'Ry',
      lastName: 'Di',
      contactEmail: 'ryandi@me.com',
      phone: '3522563674',
      major: 'Information Systems/DIS',
      status: 'Already Graduated',
    };
  } catch (error) {
    console.error('Error getting user:', error);
    return null;
  }
}

// Sign in function (for client components)
export async function signIn(email: string, password: string): Promise<User> {
  // In a real application, you would validate credentials with your auth provider
  
  // Mock implementation - in a real app this would call your API
  if (!email.endsWith('ufl.edu')) {
    throw new Error('Please use your UFL email address');
  }
  
  if (!password || password.length < 6) {
    throw new Error('Invalid password');
  }
  
  // Set auth cookie (this would be done by your actual auth provider)
  document.cookie = `authToken=mock-token; path=/; max-age=${60 * 60 * 24 * 7}`; // 1 week
  
  // Return mock user
  return {
    id: '1',
    email,
    firstName: 'Ry',
    lastName: 'Di',
    contactEmail: 'ryandi@me.com',
    phone: '3522563674',
    major: 'Information Systems/DIS',
    status: 'Already Graduated',
  };
}

// Sign out function (for client components)
export async function signOut(): Promise<void> {
  // Clear auth cookie
  document.cookie = 'authToken=; path=/; expires=Thu, 01 Jan 1970 00:00:00 GMT';
  
  // In a real application, you would also notify your auth provider
}

// Reset password request
export async function resetPassword(email: string): Promise<void> {
  // In a real application, you would send a password reset email
  
  // Validate UFL email
  if (!email.endsWith('ufl.edu')) {
    throw new Error('Please use your UFL email address');
  }
  
  // Mock implementation - in a real app this would call your API
  console.log(`Password reset requested for ${email}`);
}

// Check auth state on the client side
export function useAuth() {
  // In a real application, you would use a hook from your auth provider
  // like useSession from next-auth or a custom hook
  
  // Check if auth cookie exists
  const hasAuthCookie = document.cookie.split(';').some(cookie => 
    cookie.trim().startsWith('authToken=')
  );
  
  return {
    isAuthenticated: hasAuthCookie,
    // Other auth-related properties would be available here
  };
}


--------------------------------
Next file #153 
--------------------------------
Phase 2: Component Library
Now, let's implement the core UI components that will be used throughout the application.
1. Button Component
--------------------------------
import { forwardRef } from 'react';
import { cn } from '@/lib/utils';

export interface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {
  variant?: 'default' | 'outline' | 'ghost' | 'link' | 'destructive';
  size?: 'default' | 'sm' | 'lg';
}

const Button = forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant = 'default', size = 'default', ...props }, ref) => {
    return (
      <button
        className={cn(
          'inline-flex items-center justify-center rounded-md font-medium transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring disabled:opacity-50 disabled:pointer-events-none',
          {
            'bg-primary-500 text-white hover:bg-primary-600 active:bg-primary-700': variant === 'default',
            'border border-input bg-background hover:bg-gray-50 hover:text-primary-500': variant === 'outline',
            'hover:bg-gray-100 hover:text-primary-500': variant === 'ghost',
            'text-primary-500 underline-offset-4 hover:underline': variant === 'link',
            'bg-red-500 text-white hover:bg-red-600': variant === 'destructive',
            'h-10 py-2 px-4': size === 'default',
            'h-9 px-3 rounded-md text-sm': size === 'sm',
            'h-11 px-8 rounded-md': size === 'lg',
          },
          className
        )}
        ref={ref}
        {...props}
      />
    );
  }
);

Button.displayName = 'Button';

export { Button };


--------------------------------
Next file #154 
--------------------------------
2. Card Component
--------------------------------
import { forwardRef } from 'react';
import { cn } from '@/lib/utils';

export interface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {
  variant?: 'default' | 'outline' | 'ghost' | 'link' | 'destructive';
  size?: 'default' | 'sm' | 'lg';
}

const Button = forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant = 'default', size = 'default', ...props }, ref) => {
    return (
      <button
        className={cn(
          'inline-flex items-center justify-center rounded-md font-medium transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring disabled:opacity-50 disabled:pointer-events-none',
          {
            'bg-primary-500 text-white hover:bg-primary-600 active:bg-primary-700': variant === 'default',
            'border border-input bg-background hover:bg-gray-50 hover:text-primary-500': variant === 'outline',
            'hover:bg-gray-100 hover:text-primary-500': variant === 'ghost',
            'text-primary-500 underline-offset-4 hover:underline': variant === 'link',
            'bg-red-500 text-white hover:bg-red-600': variant === 'destructive',
            'h-10 py-2 px-4': size === 'default',
            'h-9 px-3 rounded-md text-sm': size === 'sm',
            'h-11 px-8 rounded-md': size === 'lg',
          },
          className
        )}
        ref={ref}
        {...props}
      />
    );
  }
);

Button.displayName = 'Button';

export { Button };




--------------------------------
Next file #155 
--------------------------------
3. Input Component
--------------------------------
import { forwardRef } from 'react';
import { cn } from '@/lib/utils';

export interface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {
  variant?: 'default' | 'outline' | 'ghost' | 'link' | 'destructive';
  size?: 'default' | 'sm' | 'lg';
}

const Button = forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant = 'default', size = 'default', ...props }, ref) => {
    return (
      <button
        className={cn(
          'inline-flex items-center justify-center rounded-md font-medium transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring disabled:opacity-50 disabled:pointer-events-none',
          {
            'bg-primary-500 text-white hover:bg-primary-600 active:bg-primary-700': variant === 'default',
            'border border-input bg-background hover:bg-gray-50 hover:text-primary-500': variant === 'outline',
            'hover:bg-gray-100 hover:text-primary-500': variant === 'ghost',
            'text-primary-500 underline-offset-4 hover:underline': variant === 'link',
            'bg-red-500 text-white hover:bg-red-600': variant === 'destructive',
            'h-10 py-2 px-4': size === 'default',
            'h-9 px-3 rounded-md text-sm': size === 'sm',
            'h-11 px-8 rounded-md': size === 'lg',
          },
          className
        )}
        ref={ref}
        {...props}
      />
    );
  }
);

Button.displayName = 'Button';

export { Button };


--------------------------------
Next file #156 
4. Tabs Component
--------------------------------
'use client';

import * as React from 'react';
import { cn } from '@/lib/utils';

const TabsContext = React.createContext<{
  value: string;
  onValueChange: (value: string) => void;
} | null>(null);

function useTabs() {
  const context = React.useContext(TabsContext);
  if (!context) {
    throw new Error('useTabs must be used within a TabsProvider');
  }
  return context;
}

interface TabsProps {
  value: string;
  onValueChange: (value: string) => void;
  children: React.ReactNode;
  className?: string;
}

export function Tabs({ value, onValueChange, children, className }: TabsProps) {
  return (
    <TabsContext.Provider value={{ value, onValueChange }}>
      <div className={cn('w-full', className)}>
        {children}
      </div>
    </TabsContext.Provider>
  );
}

interface TabsListProps extends React.HTMLAttributes<HTMLDivElement> {
  children: React.ReactNode;
}

export function TabsList({ children, className, ...props }: TabsListProps) {
  return (
    <div
      className={cn(
        'flex flex-wrap border-b border-gray-200 gap-2',
        className
      )}
      {...props}
    >
      {children}
    </div>
  );
}

interface TabsTriggerProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {
  value: string;
  children: React.ReactNode;
}

export function TabsTrigger({ value, children, className, ...props }: TabsTriggerProps) {
  const { value: selectedValue, onValueChange } = useTabs();
  const isSelected = selectedValue === value;

  return (
    <button
      type="button"
      role="tab"
      aria-selected={isSelected}
      className={cn(
        'py-2 px-4 text-sm font-medium',
        'border-b-2 -mb-px',
        isSelected 
          ? 'border-primary-500 text-primary-500'
          : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300',
        className
      )}
      onClick={() => onValueChange(value)}
      {...props}
    >
      {children}
    </button>
  );
}

interface TabsContentProps extends React.HTMLAttributes<HTMLDivElement> {
  value: string;
  children: React.ReactNode;
}

export function TabsContent({ value, children, className, ...props }: TabsContentProps) {
  const { value: selectedValue } = useTabs();
  const isSelected = selectedValue === value;

  if (!isSelected) return null;

  return (
    <div
      role="tabpanel"
      className={cn('mt-4', className)}
      {...props}
    >
      {children}
    </div>
  );
}
--------------------------------
'use client';

import * as React from 'react';
import { cn } from '@/lib/utils';

const TabsContext = React.createContext<{
  value: string;
  onValueChange: (value: string) => void;
} | null>(null);

function useTabs() {
  const context = React.useContext(TabsContext);
  if (!context) {
    throw new Error('useTabs must be used within a TabsProvider');
  }
  return context;
}

interface TabsProps {
  value: string;
  onValueChange: (value: string) => void;
  children: React.ReactNode;
  className?: string;
}

export function Tabs({ value, onValueChange, children, className }: TabsProps) {
  return (
    <TabsContext.Provider value={{ value, onValueChange }}>
      <div className={cn('w-full', className)}>
        {children}
      </div>
    </TabsContext.Provider>
  );
}

interface TabsListProps extends React.HTMLAttributes<HTMLDivElement> {
  children: React.ReactNode;
}

export function TabsList({ children, className, ...props }: TabsListProps) {
  return (
    <div
      className={cn(
        'flex flex-wrap border-b border-gray-200 gap-2',
        className
      )}
      {...props}
    >
      {children}
    </div>
  );
}

interface TabsTriggerProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {
  value: string;
  children: React.ReactNode;
}

export function TabsTrigger({ value, children, className, ...props }: TabsTriggerProps) {
  const { value: selectedValue, onValueChange } = useTabs();
  const isSelected = selectedValue === value;

  return (
    <button
      type="button"
      role="tab"
      aria-selected={isSelected}
      className={cn(
        'py-2 px-4 text-sm font-medium',
        'border-b-2 -mb-px',
        isSelected 
          ? 'border-primary-500 text-primary-500'
          : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300',
        className
      )}
      onClick={() => onValueChange(value)}
      {...props}
    >
      {children}
    </button>
  );
}

interface TabsContentProps extends React.HTMLAttributes<HTMLDivElement> {
  value: string;
  children: React.ReactNode;
}

export function TabsContent({ value, children, className, ...props }: TabsContentProps) {
  const { value: selectedValue } = useTabs();
  const isSelected = selectedValue === value;

  if (!isSelected) return null;

  return (
    <div
      role="tabpanel"
      className={cn('mt-4', className)}
      {...props}
    >
      {children}
    </div>
  );
}





--------------------------------
Next file #157 
--------------------------------

--------------------------------

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Get Started | Smokin'Notes</title>
  <style>
    :root {
      --primary: #d32f2f;
      --primary-hover: #b71c1c;
      --text: #333;
      --light-bg: #f8f9fa;
      --border: #e0e0e0;
      --dark-bg: #121212;
      --dark-text: #f2f2f2;
    }

    body {
      background-color: var(--light-bg);
      color: var(--text);
      display: flex;
      justify-content: center;
      align-items: center;
      min-height: 100vh;
      padding: 20px;
      transition: background 0.3s, color 0.3s;
    }

    body.dark {
      background-color: var(--dark-bg);
      color: var(--dark-text);
    }

    .container {
      max-width: 480px;
      width: 100%;
      background: white;
      border-radius: 12px;
      box-shadow: 0 4px 20px rgba(0,0,0,0.08);
      overflow: hidden;
      animation: fadeIn 0.6s ease;
    }

    body.dark .container {
      background: #1e1e1e;
    }

    @keyframes fadeIn {
      from { opacity: 0; transform: translateY(20px); }
      to { opacity: 1; transform: translateY(0); }
    }

    .header {
      padding: 30px;
      text-align: center;
    }

    .logo {
      font-family: 'Georgia', serif;
      font-size: 32px;
      font-style: italic;
      font-weight: normal;
      margin-bottom: 16px;
      color: var(--primary);
    }

    h1 {
      font-size: 24px;
      margin-bottom: 8px;
      font-weight: 600;
    }

    .subtitle {
      font-size: 16px;
      color: #666;
      margin-bottom: 24px;
    }

    .form-container {
      padding: 0 30px 30px;
    }

    .form-group {
      margin-bottom: 24px;
    }

    .input-group {
      position: relative;
      display: flex;
    }

    input {
      width: 100%;
      padding: 16px 40px 16px 16px;
      border: 1px solid var(--border);
      border-radius: 8px 0 0 8px;
      font-size: 16px;
      transition: border-color 0.3s;
    }

    input:focus {
      outline: none;
      border-color: var(--primary);
    }

    #email-status {
  position: absolute;
  right: 100px;
  top: 50%;
  transform: translateY(-50%);
  font-size: 18px;
  transition: color 0.3s ease;
  pointer-events: none;
}

    .valid-icon::before {
      content: '\2714'; /* checkmark */
      color: #2e7d32;
    }

    .invalid-icon::before {
      content: '\26A0'; /* warning sign */
      color: #d32f2f;
    }

    button {
      background-color: var(--primary);
      color: white;
      border: none;
      padding: 0 24px;
      border-radius: 0 8px 8px 0;
      font-size: 16px;
      font-weight: 600;
      cursor: pointer;
      transition: background-color 0.3s;
    }

    button:hover {
      background-color: var(--primary-hover);
    }

    .benefits {
      display: flex;
      flex-direction: column;
      gap: 12px;
      margin-top: 24px;
    }

    .benefit {
      display: flex;
      align-items: center;
      gap: 12px;
    }

    .benefit-icon {
      width: 24px;
      height: 24px;
      background-color: rgba(211, 47, 47, 0.1);
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      color: var(--primary);
    }

    .terms {
      font-size: 13px;
      color: #666;
      text-align: center;
      margin-top: 24px;
    }

    .terms a {
      color: var(--primary);
      text-decoration: none;
    }

    .dark-toggle {
      position: absolute;
      top: 20px;
      right: 20px;
      font-size: 14px;
      cursor: pointer;
      color: var(--primary);
    }
  </style>
</head>
<body>
  <div class="dark-toggle" onclick="toggleDarkMode()">🌙 Toggle Dark Mode</div>
  <div class="container">
    <div class="header">
      <div class="logo">Smokin'Notes</div>
      <h1>Get started for free</h1>
      <p class="subtitle">Join over 100,000 UF students who've boosted their GPA with our study guides!</p>
    </div>

    <div class="form-container">
      <div class="form-group">
        <form id="signup-form">
          <div class="input-group">
            <input type="email" id="email" placeholder="Enter your UFL.edu email" required>
            <span id="email-status"></span>
            <button type="submit">Start</button>
          </div>
        </form>
      </div>

      <div class="benefits">
        <div class="benefit">
          <div class="benefit-icon">✓</div>
          <div>Full access to all features for 7 days</div>
        </div>

        <div class="benefit">
          <div class="benefit-icon">✓</div>
          <div>Cancel anytime</div>
        </div>
      </div>

      <p class="terms">
        By signing up, you agree to our <a href="#">Terms of Service</a> and <a href="#">Privacy Policy</a>
      </p>
    </div>
  </div>

  <script>
    const emailInput = document.getElementById('email');
    const emailStatus = document.getElementById('email-status');

    function validateUFL(email) {
      return /@ufl\.edu$/i.test(email);
    }

    emailInput.addEventListener('input', () => {
      const value = emailInput.value.trim();
      if (value === '') {
        emailStatus.className = '';
      } else if (validateUFL(value)) {
        emailStatus.className = 'valid-icon';
      } else {
        emailStatus.className = 'invalid-icon';
      }
    });

    document.getElementById('signup-form').addEventListener('submit', function(e) {
      e.preventDefault();
      const email = emailInput.value.trim();
      if (!validateUFL(email)) {
        alert('Please enter a valid @ufl.edu email address.');
        return;
      }
      alert('Signup successful. Please check your email to verify your account.');
    });

    function toggleDarkMode() {
      document.body.classList.toggle('dark');
    }
  </script>
</body>
</html>



--------------------------------
Next file #158 
--------------------------------
Membership Pages
--------------------------------
'use client';

import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import Link from 'next/link';
import Header from '@/components/layout/header';
import Footer from '@/components/layout/footer';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Check } from 'lucide-react';

export default function MembershipPlans() {
  const router = useRouter();
  const [selectedPlan, setSelectedPlan] = useState<string | null>(null);
  const [isLoading, setIsLoading] = useState<Record<string, boolean>>({
    orange: false,
    blue: false,
    platinum: false
  });
  const [numberOfMembers, setNumberOfMembers] = useState(848);

  // Mock function to simulate updating number of online members
  useEffect(() => {
    const interval = setInterval(() => {
      setNumberOfMembers(prev => {
        const change = Math.floor(Math.random() * 5) - 2; // Random number between -2 and 2
        return Math.max(800, prev + change); // Ensure it doesn't go below 800
      });
    }, 30000); // Update every 30 seconds
    
    return () => clearInterval(interval);
  }, []);

  const handleSubscribe = (planId: string) => {
    setIsLoading(prev => ({ ...prev, [planId]: true }));
    
    // Simulate API call with a timeout
    setTimeout(() => {
      setSelectedPlan(planId);
      setIsLoading(prev => ({ ...prev, [planId]: false }));
      // In a real application, this would navigate to a checkout page after successful payment setup
      router.push(`/course-selection?plan=${planId}`);
    }, 1000);
  };

  return (
    <div className="flex flex-col min-h-screen bg-gray-50">
      <Header />
      
      <div className="bg-white border-b border-gray-200 px-8 py-4">
        <div className="max-w-7xl mx-auto">
          <div className="flex text-sm text-gray-500">
            <Link href="/dashboard" className="hover:text-primary-500">Home</Link>
            <span className="mx-2">›</span>
            <Link href="/classes" className="hover:text-primary-500">My Classes</Link>
            <span className="mx-2">›</span>
            <span className="text-gray-700">Membership Plans</span>
          </div>
        </div>
      </div>
      
      <main className="flex-grow px-8 py-10">
        <div className="max-w-7xl mx-auto">
          <div className="text-center mb-10">
            <h1 className="text-3xl font-semibold mb-3 text-gray-800">Find the Right Study Plan for You</h1>
            <p className="text-gray-600 max-w-2xl mx-auto">
              Flexible membership options to match your study needs. Choose your plan and get access to top-quality study materials today!
            </p>
          </div>
          
          <div className="grid grid-cols-1 md:grid-cols-3 gap-8 mb-10">
            {/* Orange Plan */}
            <div className="bg-white rounded-xl shadow-sm overflow-hidden hover:shadow-md transition-all transform hover:-translate-y-1 border border-gray-100">
              <div className="p-6 border-b border-gray-200">
                <h3 className="text-sm font-semibold text-primary-500 uppercase mb-2">MEMBERSHIP | Orange</h3>
                <div className="flex items-baseline mb-2">
                  <span className="text-lg mr-1">$</span>
                  <span className="text-4xl font-bold">50</span>
                  <span className="text-gray-500 ml-1">/month</span>
                </div>
                <p className="text-gray-600 text-sm">Single course access.</p>
              </div>
              
              <div className="p-6">
                <div className="mb-4">
                  <div className="flex mb-2">
                    <Check size={16} className="text-primary-500 mr-2 flex-shrink-0" />
                    <span className="text-sm">Access to 1 course's complete study materials</span>
                  </div>
                  <div className="flex mb-2">
                    <Check size={16} className="text-primary-500 mr-2 flex-shrink-0" />
                    <span className="text-sm">Materials updated weekly with latest content</span>
                  </div>
                </div>
                
                <div className="border-t border-gray-200 pt-4 mb-4">
                  <p className="font-medium text-sm mb-2">Included Study Materials:</p>
                  <div className="flex mb-2">
                    <Check size={16} className="text-primary-500 mr-2 flex-shrink-0" />
                    <span className="text-sm">Online Study Guides*</span>
                  </div>
                  <div className="flex mb-2">
                    <Check size={16} className="text-primary-500 mr-2 flex-shrink-0" />
                    <span className="text-sm">Online Chapter Summaries*</span>
                  </div>
                  <div className="flex mb-2">
                    <Check size={16} className="text-primary-500 mr-2 flex-shrink-0" />
                    <span className="text-sm">Online Flash Cards*</span>
                  </div>
                  <div className="flex mb-2">
                    <Check size={16} className="text-primary-500 mr-2 flex-shrink-0" />
                    <span className="text-sm">Online Practice Exams</span>
                  </div>
                  <div className="flex mb-2">
                    <Check size={16} className="text-primary-500 mr-2 flex-shrink-0" />
                    <span className="text-sm">Online Tutorial Videos</span>
                  </div>
                </div>
                
                <div className="border-t border-gray-200 pt-4 mb-4">
                  <div className="flex mb-2">
                    <Check size={16} className="text-primary-500 mr-2 flex-shrink-0" />
                    <span className="text-sm">All materials available online for instant access</span>
                  </div>
                  <div className="flex mb-2">
                    <Check size={16} className="text-primary-500 mr-2 flex-shrink-0" />
                    <span className="text-sm">Optional printed packet at Gainesville location</span>
                  </div>
                </div>
                
                <p className="text-xs text-gray-500 mb-4">* Online access ends when printed notes are picked up</p>
                
                <Button 
                  className="w-full bg-primary-500 hover:bg-primary-600 text-white rounded-full" 
                  onClick={() => handleSubscribe('orange')}
                  disabled={isLoading.orange}
                >
                  {isLoading.orange ? 'Processing...' : 'Subscribe'}
                </Button>
              </div>
            </div>
            
            {/* Blue Plan - Most Popular */}
            <div className="bg-white rounded-xl shadow-md overflow-hidden hover:shadow-lg transition-all transform hover:-translate-y-1 border border-primary-100 relative">
              <div className="absolute top-0 right-0 left-0 bg-primary-500 text-white text-xs text-center py-1 font-medium">
                MOST POPULAR
              </div>
              
              <div className="p-6 border-b border-gray-200 pt-8">
                <h3 className="text-sm font-semibold text-primary-500 uppercase mb-2">MEMBERSHIP | Blue</h3>
                <div className="flex items-baseline mb-2">
                  <span className="text-lg mr-1">$</span>
                  <span className="text-4xl font-bold">75</span>
                  <span className="text-gray-500 ml-1">/month</span>
                </div>
                <p className="text-gray-600 text-sm">Enhanced access, and access for up to two courses.</p>
              </div>
              
              <div className="p-6">
                <div className="mb-4">
                  <div className="flex mb-2">
                    <Check size={16} className="text-primary-500 mr-2 flex-shrink-0" />
                    <span className="text-sm">Access to 2 courses' complete study materials</span>
                  </div>
                  <div className="flex mb-2">
                    <Check size={16} className="text-primary-500 mr-2 flex-shrink-0" />
                    <span className="text-sm">Materials updated weekly with latest content</span>
                  </div>
                  <div className="flex mb-2">
                    <Check size={16} className="text-primary-500 mr-2 flex-shrink-0" />
                    <span className="text-sm font-medium">30% more cost effective than Orange plan</span>
                  </div>
                </div>
                
                <div className="border-t border-gray-200 pt-4 mb-4">
                  <p className="font-medium text-sm mb-2">Included Materials:</p>
                  <div className="flex mb-2">
                    <Check size={16} className="text-primary-500 mr-2 flex-shrink-0" />
                    <span className="text-sm">Online Study Guides*</span>
                  </div>
                  <div className="flex mb-2">
                    <Check size={16} className="text-primary-500 mr-2 flex-shrink-0" />
                    <span className="text-sm">Online Chapter Summaries*</span>
                  </div>
                  <div className="flex mb-2">
                    <Check size={16} className="text-primary-500 mr-2 flex-shrink-0" />
                    <span className="text-sm">Online Flash Cards*</span>
                  </div>
                  <div className="flex mb-2">
                    <Check size={16} className="text-primary-500 mr-2 flex-shrink-0" />
                    <span className="text-sm">Online Practice Exams</span>
                  </div>
                  <div className="flex mb-2">
                    <Check size={16} className="text-primary-500 mr-2 flex-shrink-0" />
                    <span className="text-sm">Online Tutorial Videos</span>
                  </div>
                </div>
                
                <div className="border-t border-gray-200 pt-4 mb-4">
                  <div className="flex mb-2">
                    <Check size={16} className="text-primary-500 mr-2 flex-shrink-0" />
                    <span className="text-sm">Materials available online (packet pickup optional)</span>
                  </div>
                  <div className="flex mb-2">
                    <Check size={16} className="text-primary-500 mr-2 flex-shrink-0" />
                    <span className="text-sm">Printed packet available at Gainesville location</span>
                  </div>
                </div>
                
                <p className="text-xs text-gray-500 mb-4">* Available online unless/until printed notes picked up</p>
                
                <Button 
                  className="w-full bg-primary-500 hover:bg-primary-600 text-white rounded-full" 
                  onClick={() => handleSubscribe('blue')}
                  disabled={isLoading.blue}
                >
                  {isLoading.blue ? 'Processing...' : 'Subscribe'}
                </Button>
              </div>
            </div>
            
            {/* Platinum Plan */}
            <div className="bg-white rounded-xl shadow-sm overflow-hidden hover:shadow-md transition-all transform hover:-translate-y-1 border border-gray-100">
              <div className="p-6 border-b border-gray-200 bg-gradient-to-r from-gray-50 to-white">
                <h3 className="text-sm font-semibold text-primary-500 uppercase mb-2">MEMBERSHIP | Platinum</h3>
                <div className="flex items-baseline mb-2">
                  <span className="text-lg mr-1">$</span>
                  <span className="text-4xl font-bold">100</span>
                  <span className="text-gray-500 ml-1">/month</span>
                </div>
                <p className="text-gray-600 text-sm">Enhanced access, and access for up to three courses.</p>
              </div>
              
              <div className="p-6">
                <div className="mb-4">
                  <div className="flex mb-2">
                    <Check size={16} className="text-primary-500 mr-2 flex-shrink-0" />
                    <span className="text-sm">Access to 3 courses' complete study materials</span>
                  </div>
                  <div className="flex mb-2">
                    <Check size={16} className="text-primary-500 mr-2 flex-shrink-0" />
                    <span className="text-sm">Materials updated weekly with latest content</span>
                  </div>
                  <div className="flex mb-2">
                    <Check size={16} className="text-primary-500 mr-2 flex-shrink-0" />
                    <span className="text-sm font-medium">33% more cost effective than Orange plan</span>
                  </div>
                </div>
                
                <div className="border-t border-gray-200 pt-4 mb-4">
                  <p className="font-medium text-sm mb-2">Included Materials:</p>
                  <div className="flex mb-2">
                    <Check size={16} className="text-primary-500 mr-2 flex-shrink-0" />
                    <span className="text-sm">Online Study Guides*</span>
                  </div>
                  <div className="flex mb-2">
                    <Check size={16} className="text-primary-500 mr-2 flex-shrink-0" />
                    <span className="text-sm">Online Chapter Summaries*</span>
                  </div>
                  <div className="flex mb-2">
                    <Check size={16} className="text-primary-500 mr-2 flex-shrink-0" />
                    <span className="text-sm">Online Flash Cards*</span>
                  </div>
                  <div className="flex mb-2">
                    <Check size={16} className="text-primary-500 mr-2 flex-shrink-0" />
                    <span className="text-sm">Online Practice Exams</span>
                  </div>
                  <div className="flex mb-2">
                    <Check size={16} className="text-primary-500 mr-2 flex-shrink-0" />
                    <span className="text-sm">Online Tutorial Videos</span>
                  </div>
                </div>
                
                <div className="border-t border-gray-200 pt-4 mb-4">
                  <div className="flex mb-2">
                    <Check size={16} className="text-primary-500 mr-2 flex-shrink-0" />
                    <span className="text-sm">Materials available online (packet pickup optional)</span>
                  </div>
                  <div className="flex mb-2">
                    <Check size={16} className="text-primary-500 mr-2 flex-shrink-0" />
                    <span className="text-sm">Printed packet available at Gainesville location</span>
                  </div>
                </div>
                
                <p className="text-xs text-gray-500 mb-4">* Available online unless/until printed notes picked up</p>
                
                <Button 
                  className="w-full bg-primary-500 hover:bg-primary-600 text-white rounded-full" 
                  onClick={() => handleSubscribe('platinum')}
                  disabled={isLoading.platinum}
                >
                  {isLoading.platinum ? 'Processing...' : 'Subscribe'}
                </Button>
              </div>
            </div>
          </div>
          
          <div className="bg-primary-50 p-6 rounded-lg mb-8 max-w-4xl mx-auto border border-primary-100">
            <h3 className="font-semibold text-center mb-3 text-gray-800">Important Policy Information</h3>
            <div className="flex items-start mb-3">
              <Check size={18} className="text-primary-500 mr-2 mt-0.5 flex-shrink-0" />
              <p className="text-gray-700 text-sm">
                <strong>Online Access:</strong> Printing/saving of online materials is NOT available and/or permitted.
              </p>
            </div>
            <div className="flex items-start mb-3">
              <Check size={18} className="text-primary-500 mr-2 mt-0.5 flex-shrink-0" />
              <p className="text-gray-700 text-sm">
                <strong>Printed Materials:</strong> Printed packets can be picked up at our Gainesville location about a week before each exam.
              </p>
            </div>
            <div className="flex items-start">
              <Check size={18} className="text-primary-500 mr-2 mt-0.5 flex-shrink-0" />
              <p className="text-gray-700 text-sm">
                <strong>Content Updates:</strong> All materials are updated weekly to keep pace with your courses.
              </p>
            </div>
          </div>
          
          {/* Frequently Asked Questions */}
          <div className="max-w-4xl mx-auto mb-12">
            <h3 className="text-xl font-semibold text-center mb-6 text-gray-800">Frequently Asked Questions</h3>
            
            <div className="space-y-4">
              <div className="bg-white rounded-lg p-5 shadow-sm">
                <h4 className="font-medium text-gray-800 mb-2">How can I change my membership plan later?</h4>
                <p className="text-sm text-gray-600">
                  You can upgrade, downgrade, or cancel your membership at any time through your account settings. 
                  Changes to your membership will take effect at the start of your next billing cycle.
                </p>
              </div>
              
              <div className="bg-white rounded-lg p-5 shadow-sm">
                <h4 className="font-medium text-gray-800 mb-2">When will my account be charged?</h4>
                <p className="text-sm text-gray-600">
                  Your account will be charged immediately upon subscribing. Subsequent charges will occur on the 
                  same day each month. We'll send you an email reminder three days before each renewal.
                </p>
              </div>
              
              <div className="bg-white rounded-lg p-5 shadow-sm">
                <h4 className="font-medium text-gray-800 mb-2">Can I switch the courses I have access to?</h4>
                <p className="text-sm text-gray-600">
                  Yes! You can change your selected courses once per month. Simply go to your account settings and 
                  select "Manage Courses" to make changes to your course selection.
                </p>
              </div>
              
              <div className="bg-white rounded-lg p-5 shadow-sm">
                <h4 className="font-medium text-gray-800 mb-2">What if my course isn't listed?</h4>
                <p className="text-sm text-gray-600">
                  We're constantly adding new courses! If you don't see your course listed, please contact our support team and 
                  we'll prioritize adding materials for your course.
                </p>
              </div>
            </div>
          </div>
          
          {/* Call-to-Action */}
          <div className="text-center max-w-3xl mx-auto bg-white p-8 rounded-xl shadow-sm mb-10 border border-gray-100">
            <h3 className="text-xl font-semibold mb-3 text-gray-800">Join {numberOfMembers}+ students improving their grades</h3>
            <p className="text-gray-600 mb-6">
              Smokin'Notes has helped thousands of students achieve better grades with comprehensive, well-organized study materials.
              Choose your plan today and take the first step toward academic success!
            </p>
            <div className="flex flex-col sm:flex-row justify-center gap-4">
              <Button 
                className="bg-primary-500 hover:bg-primary-600 text-white"
                onClick={() => {
                  // Scroll to top to see plans
                  window.scrollTo({ top: 0, behavior: 'smooth' });
                }}
              >
                View Plans
              </Button>
              <Button variant="outline" asChild>
                <Link href="/contact">
                  Contact Support
                </Link>
              </Button>
            </div>
          </div>
        </div>
      </main>
      
      <Footer />
    </div>
  );
}


--------------------------------
Next file #159 
--------------------------------
Header Component
--------------------------------
'use client';

import { useState } from 'react';
import Link from 'next/link';
import { usePathname } from 'next/navigation';
import { Menu, X, User, LogOut, BookOpen, Home, Settings, HelpCircle } from 'lucide-react';
import { Button } from '@/components/ui/button';
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from '@/components/ui/dropdown-menu';

export default function Header() {
  const pathname = usePathname();
  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);
  
  // Mock online users count - in a real app, this could come from a server
  const onlineUsers = 848;
  
  // Simple function to check if a route is active
  const isActive = (path: string) => {
    return pathname === path || pathname?.startsWith(path + '/');
  };
  
  const navLinks = [
    { name: 'My Classes', path: '/classes', icon: <BookOpen className="h-4 w-4 mr-2" /> },
    { name: 'Study Guides', path: '/study-guides', icon: <BookOpen className="h-4 w-4 mr-2" /> },
    { name: 'Account', path: '/profile', icon: <User className="h-4 w-4 mr-2" /> },
    { name: 'Help', path: '/help', icon: <HelpCircle className="h-4 w-4 mr-2" /> },
  ];

  return (
    <header className="bg-white border-b border-gray-200">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div className="flex justify-between h-16">
          {/* Logo and Desktop Navigation */}
          <div className="flex">
            <div className="flex-shrink-0 flex items-center">
              <Link 
                href="/dashboard" 
                className="font-serif text-xl italic text-primary-500 font-normal"
              >
                Smokin&apos;Notes
              </Link>
            </div>
            
            {/* Desktop Navigation */}
            <nav className="hidden md:ml-10 md:flex md:space-x-8">
              {navLinks.map((link) => (
                <Link
                  key={link.path}
                  href={link.path}
                  className={`inline-flex items-center px-1 pt-1 border-b-2 text-sm font-medium h-full ${
                    isActive(link.path)
                      ? 'border-primary-500 text-primary-500'
                      : 'border-transparent text-gray-600 hover:text-primary-500 hover:border-gray-300'
                  }`}
                >
                  {link.name}
                </Link>
              ))}
            </nav>
          </div>
          
          {/* User Area and Mobile Menu Button */}
          <div className="flex items-center">
            {/* User Info - Desktop */}
            <div className="hidden md:flex md:items-center md:space-x-3 md:ml-4">
              <span className="text-sm text-gray-700">Hello, Ry D.</span>
              <span className="text-sm text-gray-500">{onlineUsers} Members Online</span>
              <span className="text-gray-300">|</span>
              <Link href="/logout" className="text-sm text-gray-600 hover:text-primary-500">
                Logout
              </Link>
            </div>
            
            {/* User Menu - Mobile */}
            <div className="flex md:hidden">
              <DropdownMenu>
                <DropdownMenuTrigger asChild>
                  <Button variant="ghost" size="icon">
                    <User className="h-5 w-5" />
                  </Button>
                </DropdownMenuTrigger>
                <DropdownMenuContent align="end">
                  <div className="px-3 py-2">
                    <p className="font-medium text-sm">Hello, Ry D.</p>
                    <p className="text-xs text-gray-500">{onlineUsers} Members Online</p>
                  </div>
                  <DropdownMenuSeparator />
                  <DropdownMenuItem asChild>
                    <Link href="/profile" className="flex items-center">
                      <User className="mr-2 h-4 w-4" />
                      Account
                    </Link>
                  </DropdownMenuItem>
                  <DropdownMenuItem asChild>
                    <Link href="/logout" className="flex items-center">
                      <LogOut className="mr-2 h-4 w-4" />
                      Logout
                    </Link>
                  </DropdownMenuItem>
                </DropdownMenuContent>
              </DropdownMenu>
              
              {/* Mobile menu button */}
              <button
                type="button"
                className="ml-2 inline-flex items-center justify-center p-2 rounded-md text-gray-500 hover:text-primary-500 hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-inset focus:ring-primary-500"
                onClick={() => setMobileMenuOpen(!mobileMenuOpen)}
              >
                <span className="sr-only">Open main menu</span>
                {mobileMenuOpen ? (
                  <X className="block h-6 w-6" aria-hidden="true" />
                ) : (
                  <Menu className="block h-6 w-6" aria-hidden="true" />
                )}
              </button>
            </div>
          </div>
        </div>
      </div>

      {/* Mobile menu, show/hide based on menu state */}
      {mobileMenuOpen && (
        <div className="md:hidden">
          <div className="pt-2 pb-3 space-y-1">
            {navLinks.map((link) => (
              <Link
                key={link.path}
                href={link.path}
                className={`flex items-center px-3 py-2 text-base font-medium ${
                  isActive(link.path)
                    ? 'bg-primary-50 border-l-4 border-primary-500 text-primary-500'
                    : 'border-l-4 border-transparent text-gray-600 hover:bg-gray-50 hover:border-gray-300 hover:text-gray-800'
                }`}
                onClick={() => setMobileMenuOpen(false)}
              >
                {link.icon}
                {link.name}
              </Link>
            ))}
          </div>
        </div>
      )}
    </header>
  );
}


--------------------------------
Next file #160 
--------------------------------
Footer Component
--------------------------------
import Link from 'next/link';

export default function Footer() {
  const currentYear = new Date().getFullYear();
  
  return (
    <footer className="bg-white border-t border-gray-200 py-4 px-6">
      <div className="max-w-7xl mx-auto flex flex-col md:flex-row justify-between items-center">
        <div className="text-sm text-gray-500 mb-4 md:mb-0">
          © {currentYear} Smokin&apos;Notes Inc. All rights reserved.
        </div>
        
        <div className="flex space-x-6">
          <Link href="/privacy" className="text-sm text-gray-500 hover:text-primary-500">
            Privacy
          </Link>
          <Link href="/terms" className="text-sm text-gray-500 hover:text-primary-500">
            Terms
          </Link>
          <Link href="/help" className="text-sm text-gray-500 hover:text-primary-500">
            Help
          </Link>
          <Link href="/contact" className="text-sm text-gray-500 hover:text-primary-500">
            Contact
          </Link>
        </div>
      </div>
    </footer>
  );
}
--------------------------------






--------------------------------
Next file #160 
--------------------------------
Badge Component
--------------------------------
--------------------------------
--------------------------------

import * as React from "react";
import { cva, type VariantProps } from "class-variance-authority";
import { cn } from "@/lib/utils";

const badgeVariants = cva(
  "inline-flex items-center rounded-full px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
  {
    variants: {
      variant: {
        default:
          "bg-primary-500 text-primary-foreground hover:bg-primary-600",
        secondary:
          "bg-secondary-500 text-secondary-foreground hover:bg-secondary-600",
        destructive:
          "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        outline:
          "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
        popular:
          "bg-primary-500 text-white",
        success: 
          "bg-green-500 text-white hover:bg-green-600",
        info: 
          "bg-blue-500 text-white hover:bg-blue-600",
        warning: 
          "bg-yellow-500 text-white hover:bg-yellow-600",
      },
      size: {
        default: "px-2.5 py-0.5 text-xs",
        sm: "px-2 py-0.5 text-xs",
        lg: "px-3 py-1 text-sm",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
);

export interface BadgeProps
  extends React.HTMLAttributes<HTMLDivElement>,
    VariantProps


--------------------------------
Next file #161 
--------------------------------
Component
--------------------------------
--------------------------------
--------------------------------





--------------------------------
Next file #162 
--------------------------------
Component
--------------------------------
--------------------------------
--------------------------------






--------------------------------
Next file #163 
--------------------------------
Component
--------------------------------
--------------------------------
--------------------------------



